@using System.Globalization;
@using Atomex.TezosTokens
@using Serilog;
@implements IDisposable;
@inject IJSRuntime JSRuntime;
@inject WalletStorage walletStorage;
@inject AccountStorage accountStorage;
@inject TezosTokenStorage _tezTokenStorage;

<div class="modal__container">
    <div class="dark-background__no-grad modal-title">
        @Translations.Addresses
    </div>

    @if (_addressVM.Addresses != null && _addressVM.Addresses.Count > 0 && String.IsNullOrEmpty(ExportPrivKeyAddress))
    {
        <WalletDataTable
            Variant="@WalletDataTable.AvailableVariants.Addresses"
            Addresses="@_addressVM"
            OnCopyPrivateKey="@OnCopyPrivateKey"
            OnUpdateAddress="@OnUpdateAddress"
            UpdatingAddress="@UpdatingAddress"/>
    }
    
    @if (_addressVM.Addresses == null || _addressVM.Addresses.Count == 0)
    {
        <p class="modal-subtitle">No addresses finded in local database, try to update @(_addressVM.Currency.Name).</p>
    }

    @if (!String.IsNullOrEmpty(Warning))
    {
        <p class="modal-subtitle">@Translations.PrivKeyCopied.Replace("{0}", ExportPrivKeyAddress)</p>
        <div class="modal-buttons-container">
            <NavigateButton Variant="center" OnClick="() => OnCancelClick.InvokeAsync(null)">
                @Translations.SvOk
            </NavigateButton>
        </div>
    }
    else if (!String.IsNullOrEmpty(ExportPrivKeyAddress))
    {
        <p class="modal-subtitle">
            @Translations.CopyPrivateAddrWarning.Replace("{0}", ExportPrivKeyAddress)
        </p>
        <div class="modal-buttons-container">
            <div>
                <NavigateButton Variant="left" OnClick="handleCancel">
                    @Translations.Cancel
                </NavigateButton>
                <NavigateButton Variant="right" OnClick="ExportKey">
                    @Translations.Copy
                </NavigateButton>
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public EventCallback OnCancelClick { get; set; }

    private void handleCancel()
    {
        ExportPrivKeyAddress = String.Empty;
        Warning = String.Empty;
    }

    private string ExportPrivKeyAddress = String.Empty;

    private void OnCopyPrivateKey(string address)
    {
        ExportPrivKeyAddress = address;
    }

    private CurrencyConfig _currency => walletStorage.SelectedCurrency;

    private IEnumerable<AddressInfo> Addresses { get; set; }

    private string _warning;

    public string Warning
    {
        get => _warning;
        set { _warning = value; }
    }

    private string UpdatingAddress = String.Empty;

    private async void OnUpdateAddress(string address)
    {
        Console.WriteLine($"Started updating {address}");
        UpdatingAddress = address;
        
        await _addressVM.Update(address);
        
        // await JSRuntime.InvokeVoidAsync("showNotificationInWallet", Translations.AddressUpdated.Replace("{0}", UpdatingAddress));
        UpdatingAddress = String.Empty;
        Console.WriteLine($"Ended updating {address}");
        StateHasChanged();
    }

    private async void ExportKey()
    {
        var pk = await _addressVM.ExportKey(ExportPrivKeyAddress);
        await JSRuntime.InvokeAsync<string>("copyTextToClipboard", pk);
        Warning = Translations.PrivKeyCopied;
        StateHasChanged();
    }

    private AddressesViewModel _addressVM { get; set; }

    I18nText.Translations Translations = new();

    protected override async Task OnInitializedAsync()
    {
        var tezosConfig = accountStorage.AtomexApp.Account
            .Currencies
            .GetByName(TezosConfig.Xtz);
        
        if (walletStorage.IsTezosTokensSelected)
        {
            _addressVM = new AddressesViewModel(accountStorage.AtomexApp, tezosConfig, _tezTokenStorage.TokenContract?.Contract?.Address);
        }
        else if (walletStorage.SelectedCurrency is Fa12Config)
        {
            var currency = walletStorage.SelectedCurrency as Fa12Config;
            _addressVM = new AddressesViewModel(accountStorage.AtomexApp, tezosConfig, currency.TokenContractAddress);
        }
        else
        {
            _addressVM = new AddressesViewModel(accountStorage.AtomexApp, walletStorage.SelectedCurrency, null);
        }

        _addressVM.UIRefresh += StateHasChanged;

        Translations = await I18nText.GetTextTableAsync<I18nText.Translations>(this);
        walletStorage.RefreshRequested += StateHasChanged;
        
    }
    
    void IDisposable.Dispose()
    {
        _addressVM.UIRefresh -= StateHasChanged;
    }

}