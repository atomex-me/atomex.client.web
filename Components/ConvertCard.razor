@inject WalletStorage walletStorage;
@inject SwapStorage swapStorage;

<div class="@(NoInfo ? "dark-background__no-grad inside-modal" : "dark-background__no-grad")">
    <div class="currencies-exchange-row">
        <div class="currencies-exchange__currency-usd">
            <span>@Helper.DecimalToStr(swapStorage.Amount) <span class="currency-abbr">@(swapStorage.FromCurrency.Name.ToUpper())</span></span>
            <span class="exchange-amount-container__usd-amount">$@(Helper.DecimalToStr(walletStorage.GetDollarValue(swapStorage.FromCurrency.Name, swapStorage.Amount), "F2")) <span class="currency-abbr small">USD</span></span>
        </div>
        <i class="icon currency-icon-big @(swapStorage.FromCurrency.Description.ToLower())"></i>
        <i class="convert-arrow-icon"></i>
        <i class="icon currency-icon-big @(swapStorage.ToCurrency.Description.ToLower())"></i>
        <div class="currencies-exchange__currency-usd">
            @if(swapStorage.IsNoLiquidity) {
                <span class="no-liquidity">@Translations.NoLiquidity</span>
                <span class="exchange-amount-container__usd-amount">$@(Helper.DecimalToStr(walletStorage.GetDollarValue(swapStorage.ToCurrency.Name, swapStorage.TargetAmount), "F2")) <span class="currency-abbr small">USD</span></span>
            }
            else
            {
                <span>@Helper.DecimalToStr(swapStorage.TargetAmount) <span class="currency-abbr">@(swapStorage.ToCurrency.Name.ToUpper())</span></span>
                <span class="exchange-amount-container__usd-amount">$@(Helper.DecimalToStr(walletStorage.GetDollarValue(swapStorage.ToCurrency.Name, swapStorage.TargetAmount), "F2")) <span class="currency-abbr small">USD</span></span>
            }
        </div>
    </div>
    @if(!NoInfo) {
        <div class="exchange-info">
            <RoundedContainer>
                <div class="gray-text">
                    @Translations.EstimatedPrice: 
                    <span class="white-text">
                        @Helper.DecimalToStr(swapStorage.EstimatedPrice)
                    </span>
                </div>
                <div class="gray-text">
                    @Translations.EstimatedNetworkFee: 
                    <span class="white-text">
                        $@(Helper.DecimalToStr(swapStorage.EstimatedTotalNetworkFeeInBase, "F2"))
                    </span>
                    <span class="mr-small"></span>
                    <i class="info-tooltip atomex-tooltip">
                        <span class="atomex-tooltiptext fees">
                            <p class="text-divider gray-text">
                                @Translations.NetworkFeesTitle
                            </p>
                            <div>
                                <span class="gray-text">
                                    @(Translations.PaymentFee):
                                </span> 
                                <span class="strong">
                                    @(Helper.DecimalToStr(swapStorage.EstimatedPaymentFee)) 
                                    @swapStorage.FromFeeCurrencyFormat
                                </span> 
                                <span class="gray-text">
                                    ($@(Helper.DecimalToStr(swapStorage.EstimatedPaymentFeeInBase, "F2"))) 
                                </span>
                            </div>
                            <div>
                                <span class="gray-text">
                                    @(Translations.RedeemFee):
                                </span> 
                                <span class="strong">
                                    @(Helper.DecimalToStr(swapStorage.EstimatedRedeemFee)) 
                                    @swapStorage.TargetFeeCurrencyFormat
                                </span> 
                                <span class="gray-text">
                                    ($@(Helper.DecimalToStr(swapStorage.EstimatedRedeemFeeInBase, "F2"))) 
                                </span>
                            </div>
                            <p>
                                <span class="gray-text">
                                    @(Translations.MakerFee):
                                </span> 
                                <span class="strong">
                                    @(Helper.DecimalToStr(swapStorage.EstimatedMakerNetworkFee)) 
                                    @swapStorage.FromCurrency.Name
                                </span> 
                                <span class="gray-text">
                                    ($@(Helper.DecimalToStr(swapStorage.EstimatedMakerNetworkFeeInBase, "F2"))) 
                                </span>
                            </p>
                            <div>
                                <span class="gray-text">
                                    @(Translations.TotalNetworkFees):
                                </span> 
                                <span class="strong total-fee__text">
                                    $@(Helper.DecimalToStr(swapStorage.EstimatedTotalNetworkFeeInBase, "F2"))
                                </span>
                            </div>
                        </span>
                    </i>
                </div>
            </RoundedContainer>
        </div>
        @if (!String.IsNullOrEmpty(swapStorage.Warning)) {
            <div class="convert-warning @(getWarningClass)">
                @swapStorage.Warning
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public bool NoInfo { get; set; } = false;

    private string getWarningClass {
        get => !swapStorage.IsCriticalWarning ? "no-critical": "";
    }

    private string GetIsModal
    {
      get => NoInfo ? "inside-modal" : "";
    }

    I18nText.Translations Translations = new I18nText.Translations();
    protected override async Task OnInitializedAsync()
    {
      Translations = await I18nText.GetTextTableAsync<I18nText.Translations>(this);
      swapStorage.RefreshRequested += StateHasChanged;
    }
}