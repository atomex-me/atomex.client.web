
@inject SwapStorage swapStorage;
@inject WalletStorage walletStorage;

<div class="modal__container loading-container">
  <div class="dark-background__no-grad modal-title">
    @(State == States.Confirmation ? Translations.ConvertConfirmation :
    State == States.Success ? Translations.Success :
    State == States.Error ? Translations.ConvertingError :
    State == States.CantConvert ? Translations.CantConvert : Translations.Converting)
  </div>

  @if (State == States.Converting) {
    <Loader />
    <div></div>
  }

  @if (State == States.Confirmation) {
    <div class="modal-subtitle">
      @(Translations.DoYouReallyWantToConvert):
    </div>

    <ConvertCard NoInfo="@true" />

    <div class="send-confirmation__container convert">
      <div>
        <span class="send-confirmation__label convert">@(Translations.WithPrice):</span>
        <span class="send-confirmation__coin">@swapStorage.EstimatedPrice</span>
      </div>
      <div>
        <span class="send-confirmation__label convert">@(Translations.WithPaymentFee):</span>
        <span class="send-confirmation__address">@swapStorage.EstimatedPaymentFee <span class="currency-code">@swapStorage.FromCurrency.Name</span></span>
        <span class="send-confirmation__usd">($@walletStorage.GetDollarValue(swapStorage.FromCurrency, swapStorage.EstimatedPaymentFee) <span class="currency-code">USD</span>)</span>
      </div>
      <div>
        <span class="send-confirmation__label convert">@(Translations.WithRedeemFee):</span>
        <span class="send-confirmation__address">@swapStorage.EstimatedRedeemFee <span class="currency-code">@swapStorage.ToCurrency.Name</span></span>
        <span class="send-confirmation__usd">($@walletStorage.GetDollarValue(swapStorage.ToCurrency, swapStorage.EstimatedRedeemFee) <span class="currency-code">USD</span>)</span>
      </div>
    </div>

    <div class="modal-buttons-container">
      <div>
        <NavigateButton Variant="left" OnClick="@handleCancel">
          @Translations.No
        </NavigateButton>
        <NavigateButton Variant="right" OnClick="@handleSend">
          @Translations.Yes
        </NavigateButton>
      </div>
    </div>
  }

  @if (State == States.Error) {
    <div class="modal-subtitle">
      @(ErrorText)
    </div>
  }

    @if (State == States.CantConvert) {
    <div class="modal-subtitle">
      @(swapStorage.NotReadyConvertMessage)
    </div>
  }

  @if (State == States.Success) {
    <div class="modal-subtitle">
      @(Translations.SwapSuccessfullyCreated)
    </div>
    <div class="modal-subtitle">@(Translations.SwapNote)</div>
  }

  @if (State == States.Success || State == States.Error || State == States.CantConvert) {
    <div class="modal-buttons-container">
      <div>
        <NavigateButton Variant="center" OnClick="@handleCancel">
          OK
        </NavigateButton>
      </div>
    </div>
  }

</div>

@code {
  [Parameter]
  public EventCallback OnCancelClick { get; set; }

  I18nText.Translations Translations = new I18nText.Translations();
  protected override async Task OnInitializedAsync()
  {
    Translations = await I18nText.GetTextTableAsync<I18nText.Translations>(this);
    swapStorage.RefreshRequested += StateHasChanged;

    if (swapStorage.NotReadyConvertMessage != null)
    {
      State = States.CantConvert;
      StateHasChanged();
    }
  }

  private async void handleCancel()
  {
    await OnCancelClick.InvokeAsync(null);
  }

  private string ErrorText;

  private async void handleSend()
  {
    State = States.Converting;
    ErrorText = await swapStorage.Send();
    if (ErrorText != null)
    {
      State = States.Error;
    }
    else
    {
      State = States.Success;
    }
    StateHasChanged();
  }

  private States State { get; set; } = States.Confirmation;

  private enum States
  {
    Confirmation,
    Converting,
    Error,
    CantConvert,
    Success
  }

}