@using Atomex;
@inject WalletStorage walletStorage;
@inject AccountStorage accountStorage;

<div class="exchange-container @(IsOpened ? "opened" : "") noselect">
  @if(Label.Length > 0) {
    <span>
      @(Label):
    </span>
  }
  <RoundedContainer OnClick="@OnDropdownClick">
    <CurrencyModalCard SelectedCurrency="@SelectedCurrency" Amount="@(walletStorage.GetCurrencyData(SelectedCurrency, "balance"))" />
    @if (IsOpened) {
      <div class="exchange-dropdown">
        @foreach (Currency currency in walletStorage.AvailableCurrencies)
        {
          if (!IsSecondCurrency || (IsSecondCurrency && GetCurrencyIsConverted(currency))) {
            <CurrencyModalCard
              SelectedCurrency="@currency"
              Amount="@(walletStorage.GetCurrencyData(currency, "balance"))"
              OnClick="() => OnCurrencyClick(currency)" />
          }
        }
      </div>
    }
  </RoundedContainer>
</div>

@code {
  [Parameter]
  public Currency SelectedCurrency { get; set; }

  [Parameter]
  public bool IsSecondCurrency { get; set; }

  [Parameter]
  public string Label { get; set; } = "";

  [Parameter]
  public EventCallback<Currency> OnChange { get; set; }

  private bool IsOpened { get; set; } = false;

  private bool GetCurrencyIsConverted(Currency currency)
  {
    return accountStorage.AtomexApp.Account.Symbols.SymbolByCurrencies(walletStorage.SelectedCurrency, currency) != null;
  }

  private async void OnCurrencyClick(Currency currency)
  {
    SelectedCurrency = currency;
    IsOpened = !IsOpened;

    if (!IsSecondCurrency && (SelectedCurrency.Name == walletStorage.SelectedSecondCurrency.Name
        || accountStorage.AtomexApp.Account.Symbols.SymbolByCurrencies(SelectedCurrency, walletStorage.SelectedSecondCurrency) == null))
    {
      foreach (Currency availableCurrency in walletStorage.AvailableCurrencies)
      {
        if (accountStorage.AtomexApp.Account.Symbols.SymbolByCurrencies(currency, availableCurrency) != null)
        {
          walletStorage.SelectedSecondCurrency = availableCurrency;
          break;
        }
      }
    }

    await OnChange.InvokeAsync(SelectedCurrency);
  }

  private void OnDropdownClick()
  {
    IsOpened = !IsOpened;
  }

  protected override void OnInitialized()
  {
    walletStorage.RefreshRequested += StateHasChanged;
  }
}