
@inject WalletStorage walletStorage;

<div class="modal-currency-title__container" @onclick="@OnClick">
  <div>
    @if (SelectedBaker != null) {
      <img src="@(SelectedBaker.Logo)" class="baker-logo">
    } else {
      <i class="icon currency-icon @SelectedCurrency.Description.ToLower()"></i>
    }
    <div class="modal-currency-title__text-container">
      @if (SelectedBaker != null) {
        <div>@SelectedBaker.Name</div>
        <div>@(SelectedBaker.Fee)%</div>
      } else {
        <div>@SelectedCurrency.Description.ToUpper()</div>
        <div>@Amount <span>@SelectedCurrency.Name</span></div>
      }
    </div>
  </div>
  @if (SelectedBaker != null) {
    <div>
      <span>@Translations.Available</span>
      <span>@Helper.DecimalToStr(SelectedBaker.StakingAvailable)</span>
    </div>
  }
</div>

@code {
  [Parameter]
  public Currency SelectedCurrency { get; set; }

  [Parameter]
  public Baker SelectedBaker { get; set; }

  [Parameter]
  public decimal Amount { get; set; }

  [Parameter]
  public EventCallback OnClick { get; set; }


  I18nText.Translations Translations = new I18nText.Translations();
  protected override async Task OnInitializedAsync()
  {
    Translations = await I18nText.GetTextTableAsync<I18nText.Translations>(this);
    walletStorage.RefreshRequested += StateHasChanged;
  }
}