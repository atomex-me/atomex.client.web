@inject BakerStorage bakerStorage;
@inject WalletStorage walletStorage;
@inject AccountStorage accountStorage;
@using atomex_frontend.Common;
@using System.Timers;

<div class="currency-card for-tezos delegation-card @(walletStorage.IsUpdating ? "disabled" : "")">
  @if(bakerStorage.Delegations.Count == 0) {
    <div class="delegation__title">@Translations.NoDelegationsFound</div>
  } else {
    <div class="delegations-list__container">
      @foreach (var delegation in bakerStorage.Delegations)
      {
        <div class="delegation-row">
          <div>
            <img title="@delegation.Baker.Name" src="@(!String.IsNullOrEmpty(delegation.Baker.Logo) ? delegation.Baker.Logo : "/css/images/atomex_logo_small.png")">
            <a target="_blank" href="@($"{bakerStorage._tezos.TxExplorerUri}{delegation.Address}")">@delegation.Address</a>
          </div>
          <span class="btc-brush">@(Helper.SetPrecision(delegation.Balance, 2))</span>
        </div>
      }
    </div>
  }

  <div class="delegation__button-container">
    <NavigateButton Variant="small" OnClick="@StakingOpenCloseHandler">Staking</NavigateButton>
  </div>

  <Modal IsOpen="@StakingModalOpened" OnClose="@StakingOpenCloseHandler">
    <div class="loading-container">
      <div class="modal__container">
        <div class="dark-background__no-grad modal-title">
          Staking
        </div>
        <div class="modal-subtitle">
          Click to delegate or change your baker.
        </div>

        <div class="staking-container">
          @foreach (var address in xtzNotNullAddresses)
          {

            <div class="staking-row" @onclick="() => {
                bakerStorage.SetWalletAddress(address.Address);
                StakingOpenCloseHandler();
                DelegatorOpenCloseHandler();
              }">
              <div class="staking-row__address staking__two-rows">
                <span>@address.Address</span>
                <span>@address.AvailableBalance() XTZ</span>
              </div>
              <i class="convert-arrow-icon staking"></i>
              <div class="staking-row__alias">
                @if (bakerStorage.GetAddressDelegated(address.Address)) {
                  <div class="staking-row__alias-text staking__two-rows">
                    <span>@bakerStorage.GetBakerDataByAddress(address.Address).Name</span>
                    <span>@(Helper.SetPrecision((bakerStorage.GetBakerDataByAddress(address.Address).EstimatedRoi * 100), 3).ToString("G29"))%</span>
                  </div>
                  <img src="@bakerStorage.GetBakerDataByAddress(address.Address).Logo" alt="">
                } else {
                  <span class="not-delegated">
                    Not delegated
                  </span>
                }
              </div>
            </div>    
          }
        </div>
        <div class="modal-buttons-container">
          <NavigateButton Variant="center" OnClick="StakingOpenCloseHandler">
              @Translations.Cancel
          </NavigateButton>
        </div>
      </div>
    </div>
  </Modal>

  <Modal IsOpen="@DelegatorModalOpened" OnClose="@DelegatorOpenCloseHandler">

    <div class="loading-container">
      @if (DelegationChecking || bakerStorage.FeeChecking) {
        <Loader />
      }
      <div class="modal__container @(DelegationChecking || bakerStorage.FeeChecking ? "disabled" : "")">
        <div class="dark-background__no-grad modal-title">
          @if(State == States.FillData) {
            @Translations.Delegate
          } else if(State == States.Confirmation) {
            @Translations.DelegationConfirmation
          } else if (State == States.SendingReguest) {
            @(Translations.Delegating + "...")
          } else if (State == States.Success) {
            @Translations.Success
          } else if (State == States.Error) {
            @Translations.Error
          }
        </div>

        @if(!String.IsNullOrEmpty(bakerStorage.Warning)) {
          <div class="modal-subtitle">
            @bakerStorage.Warning
          </div>
        } else if (GetIsLoading) {
            <Loader />
            <div></div>
        } else if(bakerStorage.FromBakersList.Count == 0) {
            <div class="modal-subtitle">
              No bakers found.
            </div>
        } else {
        <div class="modal-subtitle">
          @if(State == States.FillData) {
            @(Translations.DelegatingToABakery + ".")
          }
          else if(State == States.Confirmation) {
            @(Translations.DoYouReallyWantToDelegate + ":")
          } else if (State == States.Success) {
            @(Translations.SuccessfullDelegation + "!")
            <div>
              <a target="_blank" href="@(bakerStorage._tezos.TxExplorerUri + DelegationTxId)">@DelegationTxId</a>
            </div>
          }
        </div>
        if (State == States.FillData) {
          <div class="delegate-container @(DropdownOpened ? "opened" : "") noselect">
            @if (DropdownOpened) {
              <DelegatorSearchInput OnChange="OnSearchChange" />
            }

            <RoundedContainer>
              <CurrencyModalCard
                SelectedBaker="@(bakerStorage.Baker)"
                OnClick="@(handleDropdown)"
                Fade="@(DropdownOpened ? "fade" : "")" />

              @if (DropdownOpened) {
                <BakerDropdown OnBakerClick="@OnBakerClick" SearchValue="@searchValue" />
              }
            </RoundedContainer>
          </div>

          <Input
            Description="@Translations.ToAddress"
            InputType="text"
            InputName="delegateToAddress"
            Value="@(bakerStorage.Address)"
            OnChange="@ToAddressChange"
            Disabled="@(bakerStorage.Baker.Name != bakerStorage.CUSTOM_BAKER_NAME)"
            Theme="light" />

          <Dropdown
            OnChange="@OnAddressChange"
            Options="@DropAddresses"
            Description=@($"{Translations.From} {Translations.Address}")
            CurrentValue="@(bakerStorage.WalletAddress.Address)" />

          <Input 
            Description="@Translations.MinersFee" 
            InputType="number" 
            InputName="delegationFee" 
            Value="@Helper.DecimalToStr(bakerStorage.Fee)" 
            OnChange="@BakerFeeChange"
            Theme="light"
            AdditionalRightInfo="@String.Concat("$", walletStorage.GetDollarValue(bakerStorage._tezos.Name, bakerStorage.Fee), " USD")"
            Disabled="@(bakerStorage.UseDefaultFee)" />

          <Checkbox
            Checked="@bakerStorage.UseDefaultFee"
            Description="@Translations.UseDefaultFee"
            OnChange="@((value) => bakerStorage.UseDefaultFee = value)" />
          } else if (State == States.Confirmation) {
            <div class="send-confirmation__container">
              <div>
                <span class="send-confirmation__label">@Translations.To.ToLower() @Translations.Delegate.ToLower():</span>
                <span class="send-confirmation__coin">@Helper.DecimalToStr(bakerStorage.WalletAddress.AvailableBalance()) <span class="currency-code">@bakerStorage._tezos.Name</span></span>
                <span class="send-confirmation__usd">($@walletStorage.GetDollarValue(bakerStorage._tezos.Name, bakerStorage.WalletAddress.AvailableBalance()) <span class="currency-code">USD</span>)</span>
              </div>
              <div>
                <span class="send-confirmation__label">to address:</span>
                <span class="send-confirmation__address">@bakerStorage.Address</span>
              </div>
              <div>
                <span class="send-confirmation__label">with comission:</span>
                <span class="send-confirmation__coin">@Helper.DecimalToStr(bakerStorage.Fee) <span class="currency-code">@bakerStorage._tezos.Name</span></span>
                <span class="send-confirmation__usd">($@walletStorage.GetDollarValue(bakerStorage._tezos.Name, bakerStorage.Fee) <span class="currency-code">USD</span>)</span>
              </div>
            </div>
            @if (bakerStorage.Baker.StakingAvailable < 0) {
              <div class="overdelegated-note">
                @(Translations.OverdelegatedNote).
              </div>
            }
            @if (bakerStorage.Baker.IsMinDelegation && bakerStorage.Baker.MinDelegation > bakerStorage.WalletAddress.AvailableBalance()) {
              <div class="overdelegated-note">
                @(Translations.BakerHasMinDelegateLimit).
              </div>
            }
          }
        }
          <div class="modal-buttons-container">
            <div>
              @if ((State == States.FillData || State == States.Confirmation) && String.IsNullOrEmpty(bakerStorage.Warning) && !GetIsLoading) {
                <NavigateButton Variant="left" OnClick="handleCancel">
                  @if (State == States.FillData) {
                    @Translations.CwvBack
                  }
                  @if (State == States.Confirmation) {
                    @Translations.No
                  }
                </NavigateButton>
                <NavigateButton Variant="right" OnClick="handleNextClick" Disabled="@(!GetFormValid)">
                  @if (State == States.FillData) {
                    @Translations.Delegate
                  }
                  @if (State == States.Confirmation) {
                    @Translations.Yes
                  }
                </NavigateButton>
              }
              @if (State == States.Success) {
                <NavigateButton Variant="center" OnClick="handleCancel">OK</NavigateButton>
              }
              @if (State == States.Error || !String.IsNullOrEmpty(bakerStorage.Warning)) {
                <NavigateButton Variant="center" OnClick="handleCancel">OK</NavigateButton>
              }
            </div>
          </div>
        </div>
    </div>
  </Modal>
</div>

@code {
  private string searchValue { get; set; } = String.Empty;
  protected void OnSearchChange(string value) {
    searchValue = value;
  }
  private System.Timers.Timer debounceToAddress;
  private System.Timers.Timer debounceFee;
  private bool DelegatorModalOpened { get; set; } = false;
  private bool StakingModalOpened { get; set; } = false;

  private bool DropdownOpened { get; set; } = false;

  private States State { get; set; } = States.FillData;

  private bool GetFormValid { get => true; }

  private bool GetIsLoading { get => bakerStorage.FromBakersList == null || State == States.SendingReguest; }

  private bool DelegationChecking { get; set; } = false;

  private string DelegationTxId { get; set; } = String.Empty;

  protected string[] DropAddresses
  {
    get => bakerStorage.FromAddressList
    .Where(wa => wa.Balance > 0)
    .Select(wa => $"{wa.Address} {Helper.SetPrecision(wa.Balance, 4)}").ToArray();
  }

  List<WalletAddress> xtzNotNullAddresses = new List<WalletAddress>();

  private string ToAddress { get; set; }
  private void ToAddressChange(string address)
  {
    debounceToAddress.Stop();
    debounceToAddress.Start();
    ToAddress = address;
  }

  private void OnUserFinishToAddress(Object source, ElapsedEventArgs e)
  {
    InvokeAsync(() =>
     {
       bakerStorage.Address = ToAddress;
     });
  }

  private void OnAddressChange(string address)
  {
    bakerStorage.WalletAddress = bakerStorage.FromAddressList.Find(a => a.Address == address);
  }

  private void DelegatorOpenCloseHandler()
  {
    DelegatorModalOpened = !DelegatorModalOpened;
    if (DelegatorModalOpened)
    {
      // bakerStorage.Initialize();
      State = States.FillData;
    } else {
      StakingOpenCloseHandler();
    }
  }

  private void StakingOpenCloseHandler() {
    StakingModalOpened = !StakingModalOpened;

    if (StakingModalOpened) {
      bakerStorage.Initialize();
    }
  }

  private void OnBakerClick(Baker baker)
  {
    bakerStorage.Baker = baker;
    DropdownOpened = false;
  }

  private void handleCancel()
  {
    if (State == States.Error || !String.IsNullOrEmpty(bakerStorage.Warning))
    {
      if (bakerStorage.Warning == Translations.NoEmptyAccounts)
      {
        // DelegatorModalOpened = false;
        DelegatorOpenCloseHandler();
      }
      bakerStorage.Initialize();
      State = States.FillData;
    }
    else if (State == States.FillData)
    {
      // DelegatorModalOpened = false;
      DelegatorOpenCloseHandler();
    }
    else if (State == States.Confirmation)
    {
      State = States.FillData;
    }

    else if (State == States.Success)
    {
      // DelegatorModalOpened = false;
      DelegatorOpenCloseHandler();
    }
  }

  private async void handleNextClick()
  {
    if (State == States.FillData)
    {
      DelegationChecking = true;
      await bakerStorage.NextCommand();
      if (String.IsNullOrEmpty(bakerStorage.Warning))
      {
        State = States.Confirmation;
      }
      DelegationChecking = false;
    }
    else if (State == States.Confirmation)
    {
      State = States.SendingReguest;
      var res = await bakerStorage.Send();
      if (String.IsNullOrEmpty(bakerStorage.Warning))
      {
        DelegationTxId = res.Value;
        State = States.Success;
      }
      else
      {
        State = States.Error;
      }
    }
    StateHasChanged();
  }

  private void handleDropdown()
  {
    DropdownOpened = !DropdownOpened;
  }

  private string Fee { get; set; }
  private void BakerFeeChange(string fee)
  {
    // bakerStorage.Fee = Helper.StrToDecimal(fee);
    debounceFee.Stop();
    debounceFee.Start();
    Fee = fee;
  }

  private void OnUserFinishFee(Object source, ElapsedEventArgs e)
  {
    InvokeAsync(() =>
     {
       bakerStorage.Fee = Helper.StrToDecimal(Fee);
     });
  }


  private enum States
  {
    FillData,
    Confirmation,
    SendingReguest,
    Success,
    Error
  }

  I18nText.Translations Translations = new I18nText.Translations();
  protected override async Task OnInitializedAsync()
  {
    Translations = await I18nText.GetTextTableAsync<I18nText.Translations>(this);

    var account = accountStorage.Account.GetCurrencyAccount("XTZ");
    xtzNotNullAddresses = (await account.GetAddressesAsync())
        .Where(addr => addr.AvailableBalance() > 0)
        .ToList();

    debounceToAddress = new System.Timers.Timer(1000);
    debounceToAddress.Elapsed += OnUserFinishToAddress;
    debounceToAddress.AutoReset = false;

    debounceFee = new System.Timers.Timer(800);
    debounceFee.Elapsed += OnUserFinishFee;
    debounceFee.AutoReset = false;

    bakerStorage.RefreshUI += StateHasChanged;
    walletStorage.RefreshRequested += StateHasChanged;
  }
}