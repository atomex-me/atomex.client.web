@inject WalletStorage walletStorage;
<div>
    <div class="@(Error ? "error-input" : "")">
        <div class="@((string.IsNullOrEmpty(Description) ?
                  "atomex-input-container atomex-select" :
                  "atomex-input-container atomex-select with-description"))">
            @if (Description != null)
            {
                <div class="input-description">
                    <span>@Description</span>
                </div>
            }
            <select @onchange="handleChange">
                @for (int x = 0; x < Options.Length; x++)
                {
                    @if (x == getSelectedOptionIndex())
                    {
                        @if(Options[x].Split(" ").Length == MAX_OPTION_WORDS) {
                            <option selected="selected" value="@Options[x].Split(" ")[0]">@Options[x].Split(" ")[0]</option>
                        } else {
                            <option selected="selected" value="@Options[x]">@Options[x]</option>
                        }
                    }
                    else
                    {
                        @if(Options[x].Split(" ").Length == MAX_OPTION_WORDS) {
                            <option value="@Options[x].Split(" ")[0]">@Options[x]</option>
                        } else {
                            <option value="@Options[x]">@Options[x]</option>
                        }
                    }
                }
            </select>
            @if(getSelectedOptionIndex() != -1 && Options[getSelectedOptionIndex()].Split(" ").Length == MAX_OPTION_WORDS) {
                <div class="additional-info">@Options[getSelectedOptionIndex()].Split(" ")[1]</div>
            }
        </div>
    </div>
    @if (!String.IsNullOrEmpty(ErrorDescription))
    {
        <div class="error-description">
            @ErrorDescription
        </div>
    }
</div>

@code {
    private int MAX_OPTION_WORDS = 2;

    [Parameter]
    public EventCallback<string> OnChange { get; set; }

    [Parameter]
    public string[] Options { get; set; }

    [Parameter]
    public string Description { get; set; }

    [Parameter]
    public string CurrentValue { get; set; }

    [Parameter]
    public bool Error { get; set; }

    [Parameter]
    public string ErrorDescription { get; set; }


    protected async void handleChange(ChangeEventArgs e)
    {
      await OnChange.InvokeAsync(e.Value.ToString());
    }

    protected int getSelectedOptionIndex()
    {
      return Array.FindIndex(Options,
          option => option.Split(" ").Length == MAX_OPTION_WORDS ?
          option.Split(" ")[0].Equals(CurrentValue) : option.Equals(CurrentValue));
    }
}