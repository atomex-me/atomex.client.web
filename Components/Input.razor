<div class="atomex-input-container atomex-input @Theme @(!String.IsNullOrEmpty(Description) ? "with-description" : "") @(Error ? "no-flex" : "") @(Disabled ? "disabled" : "")">
    <div class="@(Error ? "error-input" : "no-error")">
        @if (InputType == "password")
        {
            <i class="icon-input lock"></i>
        }
        @if (Description != null)
        {
            <div class="input-description @Theme">
                <span>@Description</span>
            </div>
        }
        <input type="@InputType"
               value="@Value"
               placeholder="@InputPlaceholder"
               name="@InputName"
               @oninput="HandleChange"
               onkeydown="@GetNumberValidator"
               onkeypress="@OnKeyPress"
               disabled="@Disabled"
               autocomplete="@(InputType == "password" ? "new-password" : "off")" />
        @if(AdditionalRightInfo.Length > 0) {
            <span class="additional-input-info">@AdditionalRightInfo</span>
        }
    </div>
    @if (!String.IsNullOrEmpty(ErrorDescription)) {
        <div class="error-description">
            @ErrorDescription
        </div>
    }
</div>

@code {
    [Parameter]
    public string InputName { get; set; }

    [Parameter]
    public string Description { get; set; }

    [Parameter]
    public string InputPlaceholder { get; set; }

    [Parameter]
    public string InputType { get; set; }

    [Parameter]
    public EventCallback<string> OnChange { get; set; }

    [Parameter]
    public EventCallback<KeyboardEventArgs> OnKeyPress { get; set; }

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public bool Error { get; set; }

    [Parameter]
    public string ErrorDescription { get; set; }

    [Parameter]
    public string Theme { get; set; } = "light";

    [Parameter]
    public string AdditionalRightInfo { get; set; } = "";

    [Parameter]
    public bool Disabled { get; set; } = false;

    private string GetNumberValidator
    {
      get => InputType == "number" ? "return event.keyCode !== 69" : "";
    }


    protected async void HandleChange(ChangeEventArgs evt)
    {
      await OnChange.InvokeAsync(evt.Value.ToString());
    }
}