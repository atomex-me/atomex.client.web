@inject IJSRuntime JSRuntime;

<div
    class="atomex-input-container atomex-input @Theme @(!String.IsNullOrEmpty(Description) ? "with-description" : "") @(Error ? "no-flex" : "") @(Disabled ? "disabled" : "")">
    <div class="@(Error ? "error-input" : "no-error")">
        @if (InputType == "password")
        {
            <i class="icon-input lock"></i>
        }
        @if (Description != null)
        {
            <div class="input-description @Theme">
                <span>@Description</span>
            </div>
        }
        @if (!String.IsNullOrEmpty(SavedData))
        {
            <Form SaveData="@SavedData">
                <input type="@InputType" step="@GetStep" value="@Value" placeholder="@InputPlaceholder" name="@InputName"
                    @oninput="HandleChange" onkeydown="@GetNumberValidator" disabled="@Disabled"
                    class="@(!String.IsNullOrEmpty(WithButton) ? $"input-{WithButton}-button" : "") @(DefaultFocus ? "defaultFocus" : "")"
                    autocomplete="@(InputType == "password" ? "current-password" : "off")" />
            </Form>
        } else {
            <input type="@InputType" step="@GetStep" value="@Value" placeholder="@InputPlaceholder" name="@InputName"
                @oninput="HandleChange" onkeydown="@GetNumberValidator" disabled="@Disabled"
                class="@(!String.IsNullOrEmpty(WithButton) ? $"input-{WithButton}-button" : "") @(DefaultFocus ? "defaultFocus" : "")"
                autocomplete="@(InputType == "password" ? "current-password" : "off")" />
        }

        @if (AdditionalRightInfo.Length > 0)
        {
            <span class="additional-input-info">@AdditionalRightInfo</span>
        }
    </div>
    @if (!String.IsNullOrEmpty(ErrorDescription))
    {
        <div class="error-description">
            @ErrorDescription
        </div>
    }
</div>

@code {
    [Parameter]
    public string InputName { get; set; }

    [Parameter]
    public string Description { get; set; }

    [Parameter]
    public string InputPlaceholder { get; set; }

    [Parameter]
    public string InputType { get; set; }

    [Parameter]
    public EventCallback<string> OnChange { get; set; }

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public bool Error { get; set; }

    [Parameter]
    public string ErrorDescription { get; set; }

    [Parameter]
    public string Theme { get; set; } = "light";

    [Parameter]
    public string AdditionalRightInfo { get; set; } = "";

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public string WithButton { get; set; }

    [Parameter]
    public string SavedData { get; set; }

    [Parameter]
    public bool DefaultFocus { get; set; } = false;

    private string GetNumberValidator
    {
        get => InputType == "number" ? "return event.keyCode !== 69" : "";
    }

    private string GetStep {
        get => InputType == "number" ? "any" : null; 
    }

    protected async void HandleChange(ChangeEventArgs evt)
    {
        await OnChange.InvokeAsync(evt.Value.ToString());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && DefaultFocus)
        {
            await JSRuntime.InvokeVoidAsync("focusInput", "defaultFocus");
        }
    }
}