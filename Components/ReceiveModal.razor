@using QRCodeEncoderLibrary;
@inject IJSRuntime JSRuntime;
@inject WalletStorage walletStorage;
@inject AccountStorage accountStorage;

<div class="modal__container">
  <div class="dark-background__no-grad modal-title">
    @Translations.Receive
  </div>

  <RoundedContainer>
    <CurrencyModalCard SelectedCurrency="@walletStorage.SelectedCurrency" Amount="@walletStorage.SelectedCurrencyData.Balance" />
  </RoundedContainer>

  <div class="receive-modal-dropdown__container">
    <Dropdown
      OnChange="@OnChange"
      Options="@DropOptions"
      Description="@Translations.Address"
      CurrentValue="@CurrentValue" />
    <i class="copy-button" @onclick="@OnCopyClick" />
  </div>

  <div class="receive-qrcode">
    @if(CurrentValue.Length > 0) {
      <img src="data:image/png;base64,@(GetBase64QR(CurrentValue))" />
    }
  </div>
</div>

@code {
  [Parameter]
  public EventCallback OnCancelClick { get; set; }

  protected string[] DropOptions
  {
    get
    {
      IEnumerable<WalletAddressView> SelectedCurrencyAddreses = walletStorage.FromAddressList.Where(wa => wa.WalletAddress.Currency == walletStorage.SelectedCurrency.Name);
      var res = SelectedCurrencyAddreses.Select(wa => $"{wa.Address} {Helper.SetPrecision(wa.AvailableBalance, 4)}").ToArray();
      return res;
    }
  }

  private string _currentValue;
  protected string CurrentValue
  {
    get
    {
      if (_currentValue == null)
      {
        return GetDefaultAddress().Address;
      }
      else
      {
        return _currentValue;
      }
    }
  }

  private WalletAddress GetDefaultAddress()
  {
    IEnumerable<WalletAddressView> FromAddressList = walletStorage.FromAddressList.Where(wa => wa.WalletAddress.Currency == walletStorage.SelectedCurrency.Name);

    if (walletStorage.SelectedCurrency is Tezos || walletStorage.SelectedCurrency is Ethereum)
    {
      var activeAddressViewModel = FromAddressList
          .OrderByDescending(vm => vm.WalletAddress.AvailableBalance())
          .ToList()
          .FirstOrDefault(vm => vm.WalletAddress.HasActivity && vm.WalletAddress.AvailableBalance() > 0);

      if (activeAddressViewModel != null)
        return activeAddressViewModel.WalletAddress;
    }

    return FromAddressList.First(vm => vm.IsFreeAddress).WalletAddress;
  }

  protected void OnChange(string value)
  {
    _currentValue = value;
  }

  protected async void OnCopyClick()
  {
    await JSRuntime.InvokeAsync<string>("copyTextToClipboard", CurrentValue);
  }

  private string GetBase64QR(string address)
  {
    if (address == null || address.Length == 0)
    {
      return "";
    }
    QREncoder Encoder = new QREncoder();
    Encoder.ErrorCorrection = ErrorCorrection.Q;
    Encoder.ModuleSize = 8;
    Encoder.QuietZone = 32;
    Encoder.Encode(address);
    var memoryStream = new MemoryStream();
    Encoder.SaveQRCodeToPngFile(memoryStream);
    return Convert.ToBase64String(memoryStream.ToArray());
  }

  I18nText.Translations Translations = new I18nText.Translations();
  protected override async Task OnInitializedAsync()
  {
    Translations = await I18nText.GetTextTableAsync<I18nText.Translations>(this);
    walletStorage.RefreshRequested += StateHasChanged;
  }
}