@using QRCodeEncoderLibrary;
@inject IJSRuntime JSRuntime;
@inject WalletStorage walletStorage;
@inject AccountStorage accountStorage;

<div class="modal__container">
  <div class="dark-background modal-title">
    @Translations.Receive
  </div>

  <RoundedContainer>
    <CurrencyModalCard SelectedCurrency="@walletStorage.SelectedCurrency" Amount="@walletStorage.SelectedCurrencyData.Balance" />
  </RoundedContainer>

  <div class="receive-modal-dropdown__container">
    <Dropdown
      OnChange="@OnChange"
      Options="@DropOptions"
      Description="@Translations.Address"
      CurrentValue="@CurrentValue" />
    <i class="copy-button" @onclick="@OnCopyClick" />
  </div>

  <div class="receive-qrcode">
    @if(CurrentValue.Length > 0) {
      <img src="data:image/png;base64,@(GetBase64QR(CurrentValue))" />
    }
  </div>
</div>

@code {
  [Parameter]
  public EventCallback OnCancelClick { get; set; }

  protected string[] DropOptions
  {
    get => new string[1] { $"{walletStorage.SelectedCurrencyData.FreeExternalAddress} {Helper.SetPrecision(walletStorage.SelectedCurrencyData.Balance, 4)}" };
  }

  protected string CurrentValue
  {
    get => walletStorage.SelectedCurrencyData.FreeExternalAddress;
    set { }
  }
  protected void OnChange(string value)
  {
    CurrentValue = value;
  }

  protected async void OnCopyClick()
  {
    await JSRuntime.InvokeAsync<string>("copyTextToClipboard", CurrentValue);
  }

  private string GetBase64QR(string address)
  {
    if (address == null || address.Length == 0)
    {
      return "";
    }
    QREncoder Encoder = new QREncoder();
    Encoder.ErrorCorrection = ErrorCorrection.Q;
    Encoder.ModuleSize = 8;
    Encoder.QuietZone = 32;
    Encoder.Encode(address);
    var memoryStream = new MemoryStream();
    Encoder.SaveQRCodeToPngFile(memoryStream);
    return Convert.ToBase64String(memoryStream.ToArray());
  }

  I18nText.Translations Translations = new I18nText.Translations();
  protected override async Task OnInitializedAsync()
  {
    Translations = await I18nText.GetTextTableAsync<I18nText.Translations>(this);
    walletStorage.RefreshRequested += StateHasChanged;
  }
}