@inject WalletStorage walletStorage;
@using System.Timers;
@using atomex_frontend.Common;
@using Atomex;

<div class="modal__container loading-container">
  <div class="dark-background modal-title">
    @if (State == States.SendingData){
      @Translations.Send
    }
    @if (State == States.Confirmation) {
      @Translations.SendConfirmation
    }
    @if (State == States.Sending) {
      @Translations.Sending
    }
  </div>

  <div class="modal-subtitle">
    @if (State == States.SendingData){
      @Translations.InstantlySendingOfCurrency
    }
    @if (State == States.Confirmation) {
      @String.Concat(Translations.DoYouReallyWant, ":")
    }
  </div>
  @if (State == States.Sending) {
    <Loader />
  }

  @if (State == States.SendingData) {
    <RoundedContainer>
      <CurrencyModalCard SelectedCurrency="walletStorage.SelectedCurrency" Amount="@walletStorage.SelectedCurrencyData.Balance" />
    </RoundedContainer>

    <Input
      Description="@Translations.ToAddress"
      InputType="text"
      InputName="sendToAddress"
      Value="@walletStorage.SendingToAddress"
      OnChange="@SendAddressChange"
      Theme="dark" />

    <Input
      Description="@Translations.Amount" 
      InputType="number" 
      InputName="sendAmount" 
      Value="@Helper.DecimalToStr(walletStorage.SendingAmount)" 
      OnChange="@SendAmountChange"
      Theme="dark"
      AdditionalRightInfo="@String.Concat("$", walletStorage.SendingAmountDollars, " USD")" />

    @if(GetEthreumBasedCurrency) {
      <Input
        Description="@Translations.GasPrice"
        InputType="text"
        InputName="gasPrice"
        Value="@Helper.DecimalToStr(walletStorage.GasPrice)"
        OnChange="@SendGasPriceChange"
        Disabled="@walletStorage.UseDefaultFee"
        Theme="dark" />

      <Input
        Description="@Translations.GasLimit"
        InputType="text"
        InputName="gasLimit"
        Value="@Helper.DecimalToStr(walletStorage.GasLimit)"
        OnChange="@SendGasLimitChange"
        Disabled="@walletStorage.UseDefaultFee"
        Theme="dark" />
    }

    <Input 
      Description="@Translations.MinersFee" 
      InputType="number" 
      InputName="minersFee" 
      Value="@Helper.DecimalToStr(walletStorage.SendingFee)" 
      OnChange="@SendFeeChange"
      Theme="dark"
      AdditionalRightInfo="@String.Concat("$", GetFeeDollars, " USD")"
      Disabled="@(FeeInputDisabled)" />

      <Checkbox
        Checked="@walletStorage.UseDefaultFee"
        Description="@Translations.UseDefaultFee"
        OnChange="@OnUseDefaultFeeChange" />
  }

  @if(State == States.Confirmation) {
    <div class="send-confirmation__container">
      <div>
        <span class="send-confirmation__label">to send:</span>
        <span class="send-confirmation__coin">@walletStorage.SendingAmount <span class="currency-code">@walletStorage.SelectedCurrency.Name</span></span>
        <span class="send-confirmation__usd">($@walletStorage.SendingAmountDollars<span class="currency-code">USD</span>)</span>
      </div>
      <div>
        <span class="send-confirmation__label">to address:</span>
        <span class="send-confirmation__address">@walletStorage.SendingToAddress</span>
      </div>
      <div>
        <span class="send-confirmation__label">with comission:</span>
        <span class="send-confirmation__coin">@walletStorage.SendingFee <span class="currency-code">@walletStorage.SelectedCurrency.Name</span></span>
        <span class="send-confirmation__usd">($@walletStorage.GetDollarValue(walletStorage.SelectedCurrency, walletStorage.SendingFee) <span class="currency-code">USD</span>)</span>
      </div>
    </div>
  }

  <div class="modal-buttons-container">
    <div>
      @if (State != States.Sending) {
        <NavigateButton Variant="left" OnClick="handleCancel">
          @if (State == States.SendingData) {
            @Translations.Cancel
          }
          @if (State == States.Confirmation) {
            @Translations.No
          }
        </NavigateButton>
        <NavigateButton Variant="right" OnClick="OnNextClick">
          @if (State == States.SendingData) {
            @Translations.Send
          }
          @if (State == States.Confirmation) {
            @Translations.Yes
          }
        </NavigateButton>
      }
      @if (State == States.Success) {
        <NavigateButton Variant="center">OK</NavigateButton>
      }
    </div>
  </div>
</div>

@code {
  [Parameter]
  public EventCallback OnCancelClick { get; set; }

  private States State { get; set; } = States.SendingData;

  private async void handleCancel()
  {
    if (State == States.Confirmation)
    {
      State = States.SendingData;
    }
    else
    {
      await OnCancelClick.InvokeAsync(null);
    }
  }

  private bool FeeInputDisabled
  {
    get => GetEthreumBasedCurrency ? true : walletStorage.UseDefaultFee;
  }

  private decimal GetFeeDollars
  {
    get => walletStorage.GetDollarValue(walletStorage.SelectedCurrency, walletStorage.SendingFee);
  }

  protected string ToAddress { get; set; } = "";

  protected decimal Amount { get; set; } = 0;

  protected decimal GasPrice { get; set; } = 0;

  protected decimal GasLimit { get; set; } = 0;

  protected decimal Fee { get; set; } = 0;

  private bool GetEthreumBasedCurrency
  {
    get => walletStorage.SelectedCurrency == AccountStorage.Ethereum || walletStorage.SelectedCurrency == AccountStorage.Tether;
  }

  private System.Timers.Timer debounceInputAmount;
  private System.Timers.Timer debounceInputFee;
  private string SendingAmountString = "0";
  private string SendingFeeString = "0";

  private void SendAddressChange(string address)
  {
    walletStorage.SendingToAddress = address;
  }

  private void SendAmountChange(string amount)
  {

    debounceInputAmount.Stop();
    debounceInputAmount.Start();
    SendingAmountString = amount;
  }

  private void OnUserFinishAmount(Object source, ElapsedEventArgs e)
  {
    InvokeAsync(() =>
     {
       walletStorage.SendingAmount = Helper.StrToDecimal(SendingAmountString);
     });
  }

  private void SendFeeChange(string fee)
  {
    debounceInputFee.Stop();
    debounceInputFee.Start();
    SendingFeeString = fee;
  }

  private void OnUserFinishFee(Object source, ElapsedEventArgs e)
  {
    InvokeAsync(() =>
    {
      walletStorage.SendingFee = Helper.StrToDecimal(SendingFeeString);
    });
  }

  private void SendGasPriceChange(string gasPrice)
  {
    walletStorage.GasPrice = Helper.StrToDecimal(gasPrice);
  }

  private void SendGasLimitChange(string gasLimit)
  {
    walletStorage.GasLimit = Helper.StrToDecimal(gasLimit);
  }

  private void OnUseDefaultFeeChange(bool value)
  {
    walletStorage.UseDefaultFee = value;
  }

  private void OnNextClick()
  {
    if (State == States.SendingData)
    {
      State = States.Confirmation;
      return;
    }
    if (State == States.Confirmation)
    {
      State = States.Sending;
      return;
    }
  }

  I18nText.Translations Translations = new I18nText.Translations();
  protected override async Task OnInitializedAsync()
  {
    Translations = await I18nText.GetTextTableAsync<I18nText.Translations>(this);
    await I18nText.SetCurrentLanguageAsync(UserStorage.LangCodes.en.ToName());
    walletStorage.RefreshRequested += StateHasChanged;

    debounceInputAmount = new System.Timers.Timer(1000);
    debounceInputAmount.Elapsed += OnUserFinishAmount;
    debounceInputAmount.AutoReset = false;

    debounceInputFee = new System.Timers.Timer(1000);
    debounceInputFee.Elapsed += OnUserFinishFee;
    debounceInputFee.AutoReset = false;
  }

  private enum States
  {
    SendingData,
    Confirmation,
    Sending,
    Success,
    Error
  }
}