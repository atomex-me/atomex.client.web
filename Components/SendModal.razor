@inject WalletStorage walletStorage;
@using System.Timers;
@using atomex_frontend.Common;
@using Atomex;

<div class="modal__container">
  <div class="dark-background modal-title">
    Send
  </div>

  <div class="modal-subtitle">
    @Translations.InstantlySendingOfCurrency
  </div>

  <RoundedContainer>
    <CurrencyModalCard SelectedCurrency="walletStorage.SelectedCurrency" Amount="@walletStorage.SelectedCurrencyData.Balance" />
  </RoundedContainer>

  <Input
    Description="@Translations.ToAddress"
    InputType="text"
    InputName="sendToAddress"
    Value="@walletStorage.SendingToAddress"
    OnChange="@SendAddressChange"
    Theme="dark" />

  <Input
    Description="@Translations.Amount" 
    InputType="number" 
    InputName="sendAmount" 
    Value="@Helper.DecimalToStr(walletStorage.SendingAmount)" 
    OnChange="@SendAmountChange"
    Theme="dark"
    AdditionalRightInfo="@String.Concat("$", walletStorage.SendingAmountDollars, " USD")" />

  @if(GetEthreumBasedCurrency) {

    <Input
      Description="@Translations.GasPrice"
      InputType="text"
      InputName="gasPrice"
      Value="@Helper.DecimalToStr(walletStorage.GasPrice)"
      OnChange="@SendGasPriceChange"
      Disabled="@walletStorage.UseDefaultFee"
      Theme="dark" />

    <Input
      Description="@Translations.GasLimit"
      InputType="text"
      InputName="gasLimit"
      Value="@Helper.DecimalToStr(walletStorage.GasLimit)"
      OnChange="@SendGasLimitChange"
      Disabled="@walletStorage.UseDefaultFee"
      Theme="dark" />
  }

  <Input 
    Description="@Translations.MinersFee" 
    InputType="number" 
    InputName="minersFee" 
    Value="@Helper.DecimalToStr(walletStorage.SendingFee)" 
    OnChange="@SendFeeChange"
    Theme="dark"
    AdditionalRightInfo="@String.Concat("$", GetFeeDollars, " USD")"
    Disabled="@(FeeInputDisabled)" />

    <Checkbox
      Checked="@walletStorage.UseDefaultFee"
      Description="@Translations.UseDefaultFee"
      OnChange="@OnUseDefaultFeeChange" />

    <div class="modal-buttons-container">
      <div>
        <NavigateButton Variant="left" OnClick="OnCancelClick">
            @Translations.Cancel
        </NavigateButton>
        <NavigateButton Variant="right">
            @Translations.Send
        </NavigateButton>
      </div>
    </div>
</div>

@code {
  [Parameter]
  public EventCallback OnCancelClick { get; set; }

  private bool FeeInputDisabled
  {
    get => GetEthreumBasedCurrency ? true : walletStorage.UseDefaultFee;
  }

  private decimal GetFeeDollars
  {
    get => walletStorage.GetDollarValue(walletStorage.SelectedCurrency, walletStorage.SendingFee);
  }

  protected string ToAddress { get; set; } = "";

  protected decimal Amount { get; set; } = 0;

  protected decimal GasPrice { get; set; } = 0;

  protected decimal GasLimit { get; set; } = 0;

  protected decimal Fee { get; set; } = 0;

  private bool GetEthreumBasedCurrency
  {
    get => walletStorage.SelectedCurrency == AccountStorage.Ethereum || walletStorage.SelectedCurrency == AccountStorage.Tether;
  }

  private System.Timers.Timer debounceInputAmount;
  private System.Timers.Timer debounceInputFee;
  private string SendingAmountString = "0";
  private string SendingFeeString = "0";

  private void SendAddressChange(string address)
  {
    walletStorage.SendingToAddress = address;
  }

  private void SendAmountChange(string amount)
  {

    debounceInputAmount.Stop();
    debounceInputAmount.Start();
    SendingAmountString = amount;
  }

  private void OnUserFinishAmount(Object source, ElapsedEventArgs e)
  {
    InvokeAsync(() =>
     {
       walletStorage.SendingAmount = Helper.StrToDecimal(SendingAmountString);
     });
  }

  private void SendFeeChange(string fee)
  {
    debounceInputFee.Stop();
    debounceInputFee.Start();
    SendingFeeString = fee;
  }

  private void OnUserFinishFee(Object source, ElapsedEventArgs e)
  {
    InvokeAsync(() =>
    {
      walletStorage.SendingFee = Helper.StrToDecimal(SendingFeeString);
    });
  }

  private void SendGasPriceChange(string gasPrice)
  {
    walletStorage.GasPrice = Helper.StrToDecimal(gasPrice);
  }

  private void SendGasLimitChange(string gasLimit)
  {
    walletStorage.GasLimit = Helper.StrToDecimal(gasLimit);
  }

  private void OnUseDefaultFeeChange(bool value)
  {
    walletStorage.UseDefaultFee = value;
  }

  I18nText.Translations Translations = new I18nText.Translations();
  protected override async Task OnInitializedAsync()
  {
    Translations = await I18nText.GetTextTableAsync<I18nText.Translations>(this);
    await I18nText.SetCurrentLanguageAsync(UserStorage.LangCodes.en.ToName());
    walletStorage.RefreshRequested += StateHasChanged;

    debounceInputAmount = new System.Timers.Timer(1000);
    debounceInputAmount.Elapsed += OnUserFinishAmount;
    debounceInputAmount.AutoReset = false;

    debounceInputFee = new System.Timers.Timer(1000);
    debounceInputFee.Elapsed += OnUserFinishFee;
    debounceInputFee.AutoReset = false;
  }
}