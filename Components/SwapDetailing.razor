@using System.Globalization
@using Atomex.ViewModels
<div class="swaps-detailing__container">
    <i class="swaps-detailing__close-icon" @onclick="@OnClose"></i>
    <i class="swaps-detailing__main-progress-icon @(SwapStatusIcon)"></i>

    <div class="swaps-detailing__title @(SwapCompactStateTitleColor)">
        @SwapDetailsViewModel.SwapCompactStateTitle
    </div>
    <div class="swaps-detailing__sub-title @(SwapCompactStateDescriptionIsVisible ? "" : "no-display") @(SwapCompactStateDescriptionColor)">
        @SwapDetailsViewModel.SwapCompactStateDescription
    </div>

    <div class="swaps-detailing__pair-container">
        <div>
            <i class="icon currency-icon @(SwapDetailsViewModel.FromCurrency.Description.ToLower())"></i>
            <div class="swaps-detailing__pair-currency-name">
                @SwapDetailsViewModel.FromCurrency.Name
            </div>
            <div class="swaps-detailing__pair-currency-amount">
                @SwapDetailsViewModel.FromAmount.ToString(SwapDetailsViewModel.FromAmountFormat, CultureInfo.InvariantCulture)
            </div>
        </div>
        <i class="swaps-detailing__arrows-icon"></i>
        <div>
            <i class="icon currency-icon @(SwapDetailsViewModel.ToCurrency.Description.ToLower())"></i>
            <div class="swaps-detailing__pair-currency-name">
                @SwapDetailsViewModel.ToCurrency.Name
            </div>
            <div class="swaps-detailing__pair-currency-amount">
                @SwapDetailsViewModel.ToAmount.ToString(SwapDetailsViewModel.ToAmountFormat, CultureInfo.InvariantCulture)
            </div>
        </div>
    </div>


    <div class="swaps-detailing__buttons">
        <button class="swaps-detailing__button @(_currentTab == DetailType.Progress ? "active" : "")"
                @onclick="@(() => _currentTab = DetailType.Progress)">
            @DetailType.Progress.ToName()
        </button>
        <button class="swaps-detailing__button @(_currentTab == DetailType.Details ? "active" : "")"
                @onclick="@(() => _currentTab = DetailType.Details)">
            @DetailType.Details.ToName()
        </button>
    </div>
    <div class="swaps-detailing__tabs-container">
        @if (_currentTab == DetailType.Progress)
        {
            <div class="swaps-detailing__step">
                <div class="icons__container">
                    <i class="detailing-icon @(GetStepIconClass(Atomex.ViewModels.Helpers.SwapDetailingStatus.Initialization))"></i>
                    <i class="detailing-line @(GetStepLineClass(Atomex.ViewModels.Helpers.SwapDetailingStatus.Initialization))"></i>
                </div>
                <div class="step-text__container">
                    <div class="step-text__title">
                        Initialization
                    </div>
                    <div class="step-text__info">
                        @SwapDetailsViewModel.InitializationFirstStepDescription
                    </div>
                    <div class="step-text__info">
                        @SwapDetailsViewModel.InitializationSecondStepDescription
                    </div>
                </div>
            </div>
            <div class="swaps-detailing__step">
                <div class="icons__container">
                    <i class="detailing-icon @(GetStepIconClass(Atomex.ViewModels.Helpers.SwapDetailingStatus.Exchanging))"></i>
                    <i class="detailing-line @(GetStepLineClass(Atomex.ViewModels.Helpers.SwapDetailingStatus.Exchanging))"></i>
                </div>
                <div class="step-text__container">
                    <div class="step-text__title">
                        Exchanging
                    </div>
                    <div class="step-text__info">
                        <span>
                            @SwapDetailsViewModel.ExchangingFirstStepDescription
                        </span>
                        <a href="@SwapDetailsViewModel.ExchangingFirstStepLinkUrl"
                           class="swap-details-link"
                           target="_blank">
                            @SwapDetailsViewModel.ExchangingFirstStepLinkText
                            <i class="link-icon @(GetStepLinkVisible(SwapDetailsViewModel.ExchangingFirstStepLinkUrl) ? "" : "no-display")"></i>
                        </a>
                    </div>
                    <div class="step-text__info">
                        <span>
                            @SwapDetailsViewModel.ExchangingSecondStepDescription
                        </span>
                        <a href="@SwapDetailsViewModel.ExchangingSecondStepLinkUrl" target="_blank">
                            @SwapDetailsViewModel.ExchangingSecondStepLinkText
                            <i class="link-icon @(GetStepLinkVisible(SwapDetailsViewModel.ExchangingSecondStepLinkUrl) ? "" : "no-display")"></i>
                        </a>
                    </div>
                </div>
            </div>
            <div class="swaps-detailing__step">
                <div class="icons__container">
                    <i class="detailing-icon @(GetStepIconClass(Atomex.ViewModels.Helpers.SwapDetailingStatus.Completion))"></i>
                </div>
                <div class="step-text__container">
                    <div class="step-text__title">
                        Completion
                    </div>
                    <div class="step-text__info">
                        <span>
                            @SwapDetailsViewModel.CompletionFirstStepDescription
                        </span>
                        <a href="@SwapDetailsViewModel.CompletionFirstStepLinkUrl" target="_blank">
                            @SwapDetailsViewModel.CompletionFirstStepLinkText
                            <i class="link-icon @(GetStepLinkVisible(SwapDetailsViewModel.CompletionFirstStepLinkUrl) ? "" : "no-display")"></i>
                        </a>
                    </div>
                    <div class="step-text__info">
                        <span>
                            @SwapDetailsViewModel.CompletionSecondStepDescription
                        </span>
                        <a href="@SwapDetailsViewModel.CompletionSecondStepLinkUrl" target="_blank">
                            @SwapDetailsViewModel.CompletionSecondStepLinkText
                            <i class="link-icon @(GetStepLinkVisible(SwapDetailsViewModel.CompletionSecondStepLinkUrl) ? "" : "no-display")"></i>
                        </a>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="details-row">
                <div>Price:</div>
                <div>@SwapDetailsViewModel.Price</div>
            </div>
            <div class="details-row">
                <div>Date:</div>
                <div>@SwapDetailsViewModel.TimeStamp.ToString("dd MMM yyyy, HH:mm")</div>
            </div>
        }
    </div>
</div>

@code {

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public SwapDetailsViewModel SwapDetailsViewModel { get; set; }

    private string GetStepIconClass(Atomex.ViewModels.Helpers.SwapDetailingStatus step)
    {
        var className = string.Empty;
        return SwapDetailsViewModel.GetSwapDetailedStepState(step) switch
        {
            SwapDetailedStepState.ToBeDone => "tbd",
            SwapDetailedStepState.InProgress => "in-progress",
            SwapDetailedStepState.Completed => "completed",
            SwapDetailedStepState.Failed => "failed",
            _ => className
            };
    }

    private string GetStepLineClass(Atomex.ViewModels.Helpers.SwapDetailingStatus step)
    {
        return SwapDetailsViewModel.GetSwapDetailedStepState(step) == SwapDetailedStepState.Completed ? "completed" : "not-completed";
    }

    private bool GetStepLinkVisible(string stepUrl)
    {
        return !string.IsNullOrEmpty(stepUrl);
    }

    private bool SwapCompactStateDescriptionIsVisible
    {
        get
        {
            switch (SwapDetailsViewModel.CompactState)
            {
                case SwapCompactState.Completed:
                case SwapCompactState.Canceled:
                    return false;
                default:
                    return true;
            }
        }
    }
    
    private string SwapCompactStateDescriptionColor
    {
        get
        {
            switch (SwapDetailsViewModel.CompactState)
            {
                case SwapCompactState.InProgress:
                    return "swap-details-danger-color";
                default:
                    return "swap-details-secondary-color";
            }
        }
    }
    
    
    private string SwapCompactStateTitleColor
    {
        get
        {
            switch (SwapDetailsViewModel.CompactState)
            {
                case SwapCompactState.InProgress:
                    return "swap-details-primary-color";
                case SwapCompactState.Completed:
                    return "swap-details-success-color";
                case SwapCompactState.Canceled:
                case SwapCompactState.Refunded:
                case SwapCompactState.Unsettled:
                    return "swap-details-danger-color";
                default:
                    return "swap-details-secondary-color";
            }
        }
    }
    
    private string SwapStatusIcon
    {
        get
        {
            switch (SwapDetailsViewModel.CompactState)
            {
                case SwapCompactState.InProgress:
                    return "in-progress";
                case SwapCompactState.Completed:
                    return "completed";
                default:
                    return "cancelled";
            }
        }
    }

    private enum DetailType
    {
        Progress,
        Details
    }

    private DetailType _currentTab = DetailType.Progress;
}