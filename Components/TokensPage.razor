@inject WalletStorage _walletStorage;
@inject TezosTokenStorage _tezTokenStrg;

<div class="tokens-container">
    <div class="wallet-page__left-nav solid-dark-background tokens">
        <div>
            @foreach (var contract in _tezTokenStrg.TokensContracts)
            {
                <button
                    class="wallet-menu__button contract @(contract.Contract.Name == _tezTokenStrg.TokenContract.Contract.Name ? "active" : "")"
                    type="button"
                    @onclick="@(() => _tezTokenStrg.TokenContract = contract)">

                    <div class="contract-btn-container">
                        <img src="@contract.IconUrl" class="contract-img" alt="">
                        <div class="contract-btn-container__description">
                            <div>
                                <div class="trunc-text contract-name">
                                    @contract.Contract.Name
                                </div>
                                <div class="contract-id trunc-text">
                                    @CurrHelper.GetShortTezosAddress(contract.Contract.Id, 10, 10)
                                </div>
                            </div>
                        </div>
                    </div>

                </button>
            }
        </div>
    </div>
    <div class="contract-content-side">
        <div class="currency-card token">
            <div class="token">
                @if (_tezTokenStrg.HasTokenContract)
                {
                    <div class="currency-card__selected-currency tezos-tokens @(_tezTokenStrg.HasTokenContract ? "active" : "")">
                        <img class="token-image" src="@(_tezTokenStrg.TokenContract.IconUrl)"/>
                        <span>
                            <div class="currency-card__currency-value">
                                @(_tezTokenStrg.TokenContract.Contract.Name)
                            </div>
                            <div class="currency-card__dollar-value">
                                <div class="currency-card__dollar-value-desc">
                                    @(_tezTokenStrg.TokenContract.Contract.Address)
                                </div>
                            </div>
                        </span>
                    </div>
                }
                <div class="currency-card__buttons">
                    <button class="navigate-button small"
                            type="button">
                        Send
                    </button>
                    <button class="navigate-button small"
                            type="button">
                        Receive
                    </button>
                    <button class="navigate-button small"
                            type="button">
                        Convert
                    </button>
                    <button class="navigate-button small"
                            type="button"
                            @onclick="@_tezTokenStrg.OnUpdateClick">
                        Update
                    </button>
                    <button class="navigate-button small"
                            type="button">
                        Addresses
                    </button>
                </div>
            </div>
        </div>
        <div class="contract-tabs-container">
            @if (_tezTokenStrg.IsFa2 || (!_tezTokenStrg.IsFa2 && !_tezTokenStrg.IsFa12))
            {
                <button class="contract-tabs-btn left @(_tezTokenStrg.CurrentVariant == TezosTokenStorage.Variant.Tokens ? "active" : "")"
                        @onclick="@(() => _tezTokenStrg.OnVariantClick(TezosTokenStorage.Variant.Tokens))">
                    Tokens
                </button>
            }
            <button class="contract-tabs-btn @(_tezTokenStrg.IsFa12 ? "left" : "") @(_tezTokenStrg.CurrentVariant == TezosTokenStorage.Variant.Transfers ? "active" : "")"
                    @onclick="@(() => _tezTokenStrg.OnVariantClick(TezosTokenStorage.Variant.Transfers))">
                Transfers
            </button>
        </div>
        <div class="contract-content-container">
            @if (_tezTokenStrg.HasTokenContract && _tezTokenStrg.CurrentVariant == TezosTokenStorage.Variant.Tokens)
            {
                @foreach (var token in _tezTokenStrg.Tokens)
                {
                    <div class="token-row-container">
                        <img src="@token.TokenPreview" class="token-preview-img" alt="">
                        <div class="token-row-container__description">
                            <div>
                                <div class="trunc-text">
                                    @token.TokenBalance.Name
                                </div>
                                <div class="token-description trunc-text">
                                    @token.TokenBalance.Description
                                </div>
                            </div>
                            <div>
                                <i class="icon asset-icon"/>
                            </div>
                        </div>
                    </div>
                }
            }
            @if (_tezTokenStrg.CurrentVariant == TezosTokenStorage.Variant.Transfers)
            {
                <div class="contract-transfers-container">
                    <WalletDataTable
                        Variant="@WalletDataTable.AvailableVariants.Transactions"
                        TransactionsData="@_walletStorage.SelectedCurrencyTransactions"
                        ForTokens/>
                </div>
            }
        </div>
    </div>
</div>

@code
{
    // private string GetTransfersIsActiveClass
    // {
    //     get
    //     {
    //         if (!_tezTokenStrg.IsFa2 && !_tezTokenStrg.IsFa12) {}
    //             return "active";
    //         return 
    //     }
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
    }

    protected override void OnInitialized()
    {
        _tezTokenStrg.UIRefresh += StateHasChanged;
    }
}