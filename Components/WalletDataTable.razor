@inject WalletStorage walletStorage;

<div class="tableFixHead @(Variant == AvailableVariants.Currencies ? "portfolio" : "")">
  <table>
      @if (Variant == AvailableVariants.Currencies) {
        <thead>
        <tr>
          <th>Currency</th>
          <th>Balance</th>
          <th>Value</th>
          <th>% in portfolio</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var currency in CurrenciesData.Values) {
          <tr>
            <td>
              <div class="icon-vertical-text">
                <i class="icon currency-icon @currency.Currency.Description.ToLower()" />
                <span class="currency-name">@currency.Currency.Name</span>
              </div>
            </td>
            <td>@(Helper.SetPrecision(currency.Balance, 6)) @(currency.Currency.Name.ToUpper())</td>
            <td>$@(Helper.SetPrecision(currency.DollarValue, 2))</td>
            <td>@(Helper.SetPrecision(currency.Percent, 1)) %</td>
          </tr>
        }
      </tbody>
      }
      @if (Variant == AvailableVariants.Transactions) {
        <thead>
        <tr>
          <th>Type</th>
          <th>Description</th>
          <th>Amount</th>
          <th>State</th>
          <th>Time</th>
        </tr>
        </thead>

        <tbody>
        @foreach (var transaction in TransactionsData) {
          <tr>
            <td>
              <div class="icon-vertical-text">
                <i class="icon transaction-icon @transaction.Type.ToName().ToLower()" title="@transaction.Type.ToName()" />
              </div>
            </td>
            <td class="transaction-desc">Swap redeem bla bla</td>
            <td class="transaction-desc @(transaction.Amount < 0 ? "negative-transaction-amount" : "")">@transaction.Amount</td>
            <td class="transaction-desc">
              <span class="badge badge-@(GetBadgeColor(transaction.State))">@transaction.State.ToName()</span>
            </td>
            <td class="transaction-desc">@(String.Format("{0:d MMM yyyy, HH:mm}", transaction.CreationTime))</td>
          </tr>
        }
        </tbody>
      }
  </table>
</div>

@code {
  [Parameter]
  public AvailableVariants Variant { get; set; }

  [Parameter]
  public Dictionary<Currency, CurrencyData> CurrenciesData { get; set; }

  [Parameter]
  public List<Transaction> TransactionsData { get; set; }

  public enum AvailableVariants
  {
    Currencies,
    Transactions
  }

  private string GetBadgeColor(BlockchainTransactionState state)
  {
    switch (state)
    {
      case BlockchainTransactionState.Confirmed:
        return "primary";
      case BlockchainTransactionState.Unconfirmed:
        return "warning";
      case BlockchainTransactionState.Failed:
        return "danger";
      case BlockchainTransactionState.Pending:
        return "info";
      case BlockchainTransactionState.Unknown:
        return "dark";
      default:
        return "secondary";
    }
  }

  protected override void OnInitialized()
  {
    walletStorage.RefreshRequested += StateHasChanged;
  }
}