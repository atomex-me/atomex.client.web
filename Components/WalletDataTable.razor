@inject WalletStorage walletStorage;
@inject IJSRuntime JSRuntime;

<div class="tableFixHead @(Variant.ToName().ToLower())">
  @if (Variant == AvailableVariants.Transactions && OpenedTx?.Currency.Name == walletStorage.SelectedCurrency.Name) {
    <DetailTxInfo
      OpenedTx="@OpenedTx"
      TransactionsData="@TransactionsData"
      TxHeight="@TX_HEIGHT"
      TxInfoBlockHeight="@GetTxInfoBlockHeight" />
  }
  <table>
      @if (Variant == AvailableVariants.Currencies) {
        <thead>
        <tr>
          <th>Currency</th>
          <th>Balance</th>
          <th>Value</th>
          <th>% in portfolio</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var currency in CurrenciesData.Values) {
          <tr>
            <td>
              <div class="icon-vertical-text">
                <i class="icon currency-icon @currency.Currency.Description.ToLower()" />
                <span class="currency-name">@currency.Currency.Name</span>
              </div>
            </td>
            <td>@(Helper.SetPrecision(currency.Balance, 6)) @(currency.Currency.Name.ToUpper())</td>
            <td>$@(Helper.SetPrecision(currency.DollarValue, 2))</td>
            <td>@(Helper.SetPrecision(currency.Percent, 1)) %</td>
          </tr>
        }
      </tbody>
      }
      @if (Variant == AvailableVariants.Transactions) {
        <thead>
        <tr>
          <th>Type</th>
          <th>Description</th>
          <th>Amount</th>
          <th>State</th>
          <th>Time</th>
        </tr>
        </thead>

        <tbody class="transactions-body">
        @foreach (var transaction in TransactionsData) {
          <tr
            class="tx-row"
            @onclick="@(() => OpenedTx = OpenedTx?.Id != transaction.Id ? transaction : null )"
            style="height: @(OpenedTx?.Id == transaction.Id ? $"{GetTxInfoBlockHeight}px" : $"{TX_HEIGHT}px");">
            <td valign="@(OpenedTx?.Id == transaction.Id ? "top" : "")">
              <div class="icon-vertical-text">
                <i class="icon transaction-icon @transaction.Type.ToName().ToLower()" title="@transaction.Type.ToName()" />
              </div>
            </td>
            <td valign="@(OpenedTx?.Id == transaction.Id ? "top" : "")" class="transaction-desc">@transaction.Description</td>
            <td valign="@(OpenedTx?.Id == transaction.Id ? "top" : "")" class="transaction-desc @(transaction.Amount < 0 ? "negative-transaction-amount" : "")">@transaction.Amount</td>
            <td valign="@(OpenedTx?.Id == transaction.Id ? "top" : "")" class="transaction-desc">
              <span class="badge badge-@(GetBadgeColor(transaction.State))">@transaction.State.ToName()</span>
            </td>
            <td valign="@(OpenedTx?.Id == transaction.Id ? "top" : "")" class="transaction-desc">@(String.Format("{0:d MMM yyyy, HH:mm}", transaction.CreationTime))</td>
          </tr>
        }
        </tbody>
      }

      @if (Variant == AvailableVariants.Swaps) {
        <thead>
        <tr>
          <th>Description</th>
          <th>State</th>
          <th>Time</th>
        </tr>
        </thead>

        <tbody>
        @* @foreach (Swap swap in SwapsData) {
          <tr>
            <td class="transaction-desc">@swap</td>
          </tr>
        } *@
        </tbody>
      }
  </table>
</div>

@code {
  [Parameter]
  public AvailableVariants Variant { get; set; }

  [Parameter]
  public Dictionary<Currency, CurrencyData> CurrenciesData { get; set; }

  [Parameter]
  public List<Transaction> TransactionsData { get; set; }

  [Parameter]
  public IEnumerable<Swap> SwapsData { get; set; }

  public enum AvailableVariants
  {
    Currencies,
    Transactions,
    Swaps
  }

  private Transaction OpenedTx = null;
  private int TX_HEIGHT = 43;
  private Dictionary<string, int> TX_INFO_BLOCK_HEIGHT = new Dictionary<string, int>();

  private int GetTxInfoBlockHeight
  {
    get
    {
      int height = 150;
      TX_INFO_BLOCK_HEIGHT.TryGetValue(OpenedTx?.Currency.Name, out height);
      return height;
    }
  }

  private string GetBadgeColor(BlockchainTransactionState state)
  {
    switch (state)
    {
      case BlockchainTransactionState.Confirmed:
        return "primary";
      case BlockchainTransactionState.Unconfirmed:
        return "warning";
      case BlockchainTransactionState.Failed:
        return "danger";
      case BlockchainTransactionState.Pending:
        return "info";
      case BlockchainTransactionState.Unknown:
        return "dark";
      default:
        return "secondary";
    }
  }

  protected override void OnInitialized()
  {
    walletStorage.RefreshRequested += StateHasChanged;

    // height of Detail tx view block for Currencies;
    TX_INFO_BLOCK_HEIGHT.Add(AccountStorage.Bitcoin.Name, 118);
    TX_INFO_BLOCK_HEIGHT.Add(AccountStorage.Litecoin.Name, 118);

    TX_INFO_BLOCK_HEIGHT.Add(AccountStorage.Ethereum.Name, 220);
    TX_INFO_BLOCK_HEIGHT.Add(AccountStorage.Tether.Name, 220);

    TX_INFO_BLOCK_HEIGHT.Add(AccountStorage.Tezos.Name, 200);
    TX_INFO_BLOCK_HEIGHT.Add(AccountStorage.FA12.Name, 200);
  }
}