@inject WalletStorage walletStorage;
@inject AccountStorage accountStorage;
@inject SwapStorage swapStorage;
@inject IJSRuntime JSRuntime;

<div class="tableFixHead @(Variant.ToName().ToLower()) @(Variant==AvailableVariants.Addresses ? "no-js" : "")">
  @if (Variant == AvailableVariants.Transactions && OpenedTx?.Currency.Name == walletStorage.SelectedCurrency.Name) {
    <DetailTxInfo
      OpenedTx="@OpenedTx"
      TransactionsData="@TransactionsData"
      TxHeight="@TX_HEIGHT"
      TxInfoBlockHeight="@GetTxInfoBlockHeight" />
  }
  <table>
      @if (Variant == AvailableVariants.Currencies) {
        <thead class="js-resize-height">
        <tr>
          <th>Currency</th>
          <th>Balance</th>
          <th>Value</th>
          <th>% in portfolio</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var currency in CurrenciesData.Values) {
          <tr>
            <td>
              <div class="icon-vertical-text">
                <i class="icon currency-icon @currency.Currency.Description.ToLower()" />
                <span class="currency-name">@currency.Currency.Name</span>
              </div>
            </td>
            <td>@(Helper.DecimalToStr(currency.Balance, currency.Currency.Format)) @(currency.Currency.Name.ToUpper())</td>
            <td>$@(Helper.DecimalToStr(currency.DollarValue, "F2"))</td>
            <td>@(Helper.DecimalToStr(currency.Percent, "F1")) %</td>
          </tr>
        }
      </tbody>
      }
      @if (Variant == AvailableVariants.Transactions) {
        <thead class="js-resize-height">
        <tr>
          <th>Type</th>
          <th>Description</th>
          <th>Amount</th>
          <th>State</th>
          <th>Time</th>
        </tr>
        </thead>

        <tbody class="transactions-body">
        @foreach (var transaction in TransactionsData) {
          <tr
            class="tx-row"
            @onclick="@(() => OpenedTx = OpenedTx?.Id != transaction.Id ? transaction : null )"
            style="height: @(OpenedTx?.Id == transaction.Id ? $"{GetTxInfoBlockHeight}px" : $"{TX_HEIGHT}px");">
            <td valign="@(OpenedTx?.Id == transaction.Id ? "top" : "")">
              <div class="icon-vertical-text">
                <i class="icon transaction-icon @transaction.Type.ToName().ToLower()" title="@transaction.Type.ToName()" />
              </div>
            </td>
            <td valign="@(OpenedTx?.Id == transaction.Id ? "top" : "")" class="transaction-desc">@transaction.Description</td>
            <td valign="@(OpenedTx?.Id == transaction.Id ? "top" : "")" class="transaction-desc @(transaction.Amount < 0 ? "negative-transaction-amount" : "")">@transaction.Amount</td>
            <td valign="@(OpenedTx?.Id == transaction.Id ? "top" : "")" class="transaction-desc">
              <span class="badge badge-@(GetBadgeColor(transaction.State))">@transaction.State.ToName()</span>
            </td>
            <td valign="@(OpenedTx?.Id == transaction.Id ? "top" : "")" class="transaction-desc">@(String.Format("{0:d MMM yyyy, HH:mm}", transaction.CreationTime))</td>
          </tr>
        }
        </tbody>
      }

      @if (Variant == AvailableVariants.Swaps) {
        <thead class="js-resize-height">
        <tr>
          <th>Description</th>
          <th>State</th>
          <th>Time</th>
        </tr>
        </thead>

        <tbody>
        @foreach (Swap swap in SwapsData) {
          <tr>
            <td class="transaction-desc">
              Convert <span class="@(swap.SoldCurrency.ToLower())-brush">@(AmountHelper.QtyToAmount(swap.Side, swap.Qty, swap.Price, getCurrency(swap.SoldCurrency).DigitsMultiplier)) <span class="currency-abbr">@swap.SoldCurrency</span></span> to <span class="@(swap.PurchasedCurrency.ToLower())-brush">@(AmountHelper.QtyToAmount(swap.Side.Opposite(), swap.Qty, swap.Price, getCurrency(swap.PurchasedCurrency).DigitsMultiplier)) <span class="currency-abbr">@swap.PurchasedCurrency</span></span>
            </td>
            <td class="transaction-desc">
              <span class="badge badge-@(GetBadgeColor(swap))">@CompactStateBySwap(swap)</span>
            </td>
            <td>
              @(String.Format("{0:d MMM yyyy, HH:mm}", swap.TimeStamp.ToLocalTime()))
            </td>
          </tr>
        }
        </tbody>
      }

      @if (Variant == AvailableVariants.Addresses) {
        <thead>
        <tr>
          <th>Address</th>
          <th>Path</th>
          <th>Balance</th>
          <th>Key</th>
        </tr>
        </thead>

        <tbody>
        @foreach (var address in Addresses) {
          <tr>
            <td class="transaction-desc">
              <a
                href="@($"{walletStorage.SelectedCurrency.AddressExplorerUri}{address.Address}")"
                target="_blank">
                @address.Address
              </a>
              <button class="copy-button small" @onclick="@(() => OnCopyAddressClick(address.Address))" type="button" />
            </td>
            <td class="transaction-desc">
              @address.Path
            </td>
            <td>
              @address.Balance
            </td>
            <td>
              <button class="copy-button priv-key" @onclick="@(() => OnCopyPrivateKey.InvokeAsync(address.Address))" type="button" />
            </td>
          </tr>
        }
        </tbody>
      }
  </table>
</div>

@code {
  [Parameter]
  public AvailableVariants Variant { get; set; }

  [Parameter]
  public Dictionary<string, CurrencyData> CurrenciesData { get; set; }

  [Parameter]
  public List<Transaction> TransactionsData { get; set; }

  [Parameter]
  public IEnumerable<Swap> SwapsData { get; set; }

  [Parameter]
  public IEnumerable<AddressInfo> Addresses { get; set; }

  [Parameter]
  public EventCallback<string> OnCopyPrivateKey { get; set; }

  private Currency getCurrency(string Currency)
  {
    return AccountStorage.Currencies.GetByName(Currency);
  }

  public enum AvailableVariants
  {
    Currencies,
    Transactions,
    Swaps,
    Addresses
  }

  private Transaction OpenedTx = null;
  private int TX_HEIGHT = 43;
  private Dictionary<string, int> TX_INFO_BLOCK_HEIGHT = new Dictionary<string, int>();

  private int GetTxInfoBlockHeight
  {
    get
    {
      int height = 150;
      TX_INFO_BLOCK_HEIGHT.TryGetValue(OpenedTx?.Currency.Name.ToUpper(), out height);
      return height;
    }
  }

  private static string CompactStateBySwap(Swap swap)
  {
    if (swap.IsComplete)
      return "Completed";

    if (swap.IsCanceled)
      return "Canceled";

    if (swap.IsUnsettled)
      return "Unsettled";

    if (swap.IsRefunded)
      return "Refunded";

    return "In Progress";
  }

  private string GetBadgeColor(BlockchainTransactionState state)
  {
    switch (state)
    {
      case BlockchainTransactionState.Confirmed:
        return "primary";
      case BlockchainTransactionState.Unconfirmed:
        return "warning";
      case BlockchainTransactionState.Failed:
        return "danger";
      case BlockchainTransactionState.Pending:
        return "info";
      case BlockchainTransactionState.Unknown:
        return "dark";
      default:
        return "secondary";
    }
  }

  private static string GetBadgeColor(Swap swap)
  {
    if (swap.IsComplete)
      return "primary";

    if (swap.IsCanceled)
      return "warning";

    if (swap.IsUnsettled)
      return "danger";

    if (swap.IsRefunded)
      return "dark";

    return "info";
  }

  protected override void OnInitialized()
  {
    walletStorage.RefreshRequested += StateHasChanged;
    swapStorage.RefreshRequested += StateHasChanged;

    // height of Detail tx view block for Currencies;
    TX_INFO_BLOCK_HEIGHT.Add("BTC", 118);
    TX_INFO_BLOCK_HEIGHT.Add("LTC", 118);

    TX_INFO_BLOCK_HEIGHT.Add("ETH", 220);
    TX_INFO_BLOCK_HEIGHT.Add("USDT", 220);

    TX_INFO_BLOCK_HEIGHT.Add("XTZ", 200);
    TX_INFO_BLOCK_HEIGHT.Add("FA12", 200);
    TX_INFO_BLOCK_HEIGHT.Add("TZBTC", 200);
  }

  private async void OnCopyAddressClick(string address)
  {
    await JSRuntime.InvokeAsync<string>("copyTextToClipboard", address);
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await JSRuntime.InvokeVoidAsync("dragTable");
    }
  }
}