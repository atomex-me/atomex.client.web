 @inject UserStorage UserStorage
 
 <button class="wallet-menu__button @(IsActive ? "active" : "")" @onclick="@handleClick">
   <i class="wallet-menu-icon @(Variant.ToName().ToLower())" />
   <span>
     @if(Variant == ButtonVariants.Portfolio) {
       @Translations.Portfolio
     }

     @if(Variant == ButtonVariants.Wallets) {
       @Translations.Wallets
     }

     @if(Variant == ButtonVariants.Conversion) {
       @Translations.Conversion
     }
   </span>
 </button>
 
@code {
  [Parameter]
  public ButtonVariants Variant { get; set; }

  [Parameter]
  public bool IsActive { get; set; } 

  [Parameter]
  public EventCallback<ButtonVariants> OnClick { get; set; }

  private async void handleClick() {
    await OnClick.InvokeAsync(Variant);
  }

  public enum ButtonVariants {
    Portfolio,
    Wallets,
    Conversion
  }

  I18nText.Translations Translations = new I18nText.Translations();
  protected override async Task OnInitializedAsync() {
  Translations = await I18nText.GetTextTableAsync<I18nText.Translations>(this);
    await I18nText.SetCurrentLanguageAsync(UserStorage.LangCodes.en.ToName());
  }
}