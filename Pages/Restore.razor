@page "/restore"
@using NBitcoin;
@inject RegisterStorage RegisterStorage
@inject UserStorage UserStorage
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="register dark-background">
    <div class="loading-container">
        @if (RegisterStorage.Loading)
        {
          <Loader />
        }
        <div class="light-background register-splash @(RegisterStorage.Loading ?  " loading" : "" )">
            <div>
                <h2 class="text-center">@Translations[$"RegisterStep{(int)RegisterStorage.CurrentStep}Title"]</h2>
                <p class="text-center">@Translations[$"RestoreStep{(int)RegisterStorage.CurrentStep}Description"]</p>
                @if (RegisterStorage.CurrentStep == RegisterStorage.Steps.WalletType)
                {
                <Dropdown OnChange="@RegisterStorage.SetSelectedNetType" Options="@GetNetOptions" Description="Type"
                    CurrentValue="@RegisterStorage.SelectedNetType" />
                }
                else if (RegisterStorage.CurrentStep == RegisterStorage.Steps.WalletName)
                {
                <Input InputType="text" InputName="walletName" Value="@RegisterStorage.WalletName"
                    OnChange="@RegisterStorage.SetWalletName" InputPlaceholder="@Translations.EnterWalletName"
                    Error="@(GetWalletNameError.Length > 0)" ErrorDescription="@GetWalletNameError" />
                }
                else if (RegisterStorage.CurrentStep == RegisterStorage.Steps.MnemonicPhrase)
                {
                  <div class="register-row-container">
                    <Dropdown OnChange="@RegisterStorage.SetSelectedLanguage" Options="@GetLangsList"
                        Description="@Translations.Language" CurrentValue="@GetCurrentMnemonicLang" />

                    <Input InputType="text" InputName="mnemonics" Value="@RegisterStorage.RestoreMnemonic"
                        OnChange="@RegisterStorage.SetRestoreMnemonic" InputPlaceholder="@Translations.MnemonicPhrase"
                        Error="@(GetMnemonicError.Length > 0)" ErrorDescription="@GetMnemonicError" />
                    
                  </div>
                }
                else if (RegisterStorage.CurrentStep == RegisterStorage.Steps.DerivedPassword)
                {
                  <div class="register-row-container">
                    <Input
                      InputType="password"
                      InputName="derivedPassword"
                      Value="@RegisterStorage.DerivedKeyPassword1"
                      OnChange="@RegisterStorage.SetDerivedKeyPassword1"
                      InputPlaceholder="@Translations.EnterPasswordPlaceholder" />

                  </div>
                }
                else if (RegisterStorage.CurrentStep == RegisterStorage.Steps.StoragePassword)
                {
                  <div class="register-row-container">
                      <Input InputType="password" InputName="storagePassword" Value="@RegisterStorage.StoragePassword1"
                          OnChange="@RegisterStorage.SetStoragePassword1"
                          InputPlaceholder="@Translations.EnterPasswordPlaceholder"
                          Error="@(GetStoragePasswordError.Length > 0)" />

                      <Input InputType="password" InputName="storagePassword" Value="@RegisterStorage.StoragePassword2"
                          OnChange="@RegisterStorage.SetStoragePassword2"
                          InputPlaceholder="@Translations.ConfirmPasswordPlaceholder"
                          Error="@(GetStoragePasswordError.Length > 0)" ErrorDescription="@GetStoragePasswordError" />

                      <PasswordStrongness type="@RegisterStorage.StoragePasswordStrongness" />
                  </div>
                }
            </div>

            <div>
                <div class="buttons-container">
                    <NavigateButton Variant="left" OnClick="RegisterStorage.DecrementCurrentStep" >
                        @(RegisterStorage.CurrentStep == RegisterStorage.Steps.WalletType ? Translations.Cancel : Translations.Previous)
                    </NavigateButton>
                    <NavigateButton Variant="right" OnClick="RegisterStorage.RestoreIncrementStep"
                        Disabled="@GetCurrentStepIsError">
                        @(RegisterStorage.CurrentStep == RegisterStorage.Steps.StoragePassword ? Translations.Restore :
                        Translations.Next)
                    </NavigateButton>
                </div>
                <Steps NumberSteps="@RegisterStorage.TotalSteps" CurrentStep="@((int)RegisterStorage.CurrentStep)" />
            </div>
        </div>
    </div>
</div>

@code {
  string GetDerivedPasswordError
  {
    get { return PasswordError(RegisterStorage.DerivedPasswordsError); }
    set { }
  }

  string GetStoragePasswordError
  {
    get { return PasswordError(RegisterStorage.StoragePasswordsError); }
    set { }
  }

  string GetWalletNameError
  {
    get
    {
      return RegisterStorage.WalletNameError == RegisterStorage.WalletNameErrors.Empty ?
          Translations.EmptyWalletName : RegisterStorage.WalletNameError == RegisterStorage.WalletNameErrors.Exist
          ? Translations.ErrorWalletNameExist : "";
    }
    set { }
  }

  private string GetMnemonicError
  {
    get
    {
      if (RegisterStorage.RestoreMnemonic == null)
      {
        return "";
      }
      if (RegisterStorage.RestoreMnemonic.Length == 0)
      {
        return Translations.MnemonicCouldNotBeEmpty;
      }
      try
      {
        var unused = new Mnemonic(RegisterStorage.RestoreMnemonic, RegisterStorage.CurrentMnemonicLang);
      }
      catch (Exception e)
      {
        if (e.Message.Contains("Word count should be"))
          return Translations.InvalidMnemonicWordCount;
        else if (e.Message.Contains("is not in the wordlist"))
          return Translations.IsNotInTheWorldList.Replace("{0}", $"\"{e.Message.Split(' ')[1]}\"");
        else
          return Translations.InvalidMnemonic;
      }
      return "";
    }
  }

  bool GetCurrentStepIsError
  {
    get { return CurrentStepIsError(); }
    set { }
  }

  string[] GetLangsList
  {
    get { return RegisterStorage.AvailableMnemonicLangs.Keys.ToArray<string>(); }
    set { }
  }

  string GetCurrentMnemonicLang
  {
    get
    {
      return RegisterStorage.AvailableMnemonicLangs
      .FirstOrDefault(x => x.Value == RegisterStorage.CurrentMnemonicLang).Key;
    }
    set { }
  }

  string[] GetMnemonicWordOptions
  {
    get
    {
      return new string[] { RegisterStorage.MnemonicWordsAmount.Twelve.ToName(),
  RegisterStorage.MnemonicWordsAmount.Fifteen.ToName(),
  RegisterStorage.MnemonicWordsAmount.Eighteen.ToName(),
  RegisterStorage.MnemonicWordsAmount.TwentyOne.ToName(),
  RegisterStorage.MnemonicWordsAmount.TwentyFour.ToName()
  };
    }
    set { }
  }

  string[] GetNetOptions
  {
    get { return new string[] { RegisterStorage.Nets.MainNet.ToName(), RegisterStorage.Nets.TestNet.ToName() }; }
    set { }
  }

  private bool CurrentStepIsError()
  {
    if (RegisterStorage.CurrentStep == RegisterStorage.Steps.WalletName)
    {
      return GetWalletNameError.Length > 0 || RegisterStorage.WalletName.Length == 0;
    }

    if (RegisterStorage.CurrentStep == RegisterStorage.Steps.StoragePassword)
    {
      return GetStoragePasswordError.Length > 0 || (RegisterStorage.StoragePassword1.Length >= 0 && RegisterStorage.StoragePassword2.Length == 0);
    }

    if (RegisterStorage.CurrentStep == RegisterStorage.Steps.MnemonicPhrase)
    {
      return GetMnemonicError.Length > 0 || RegisterStorage.RestoreMnemonic == null;
    }

    return false;
  }

  private string PasswordError(RegisterStorage.PasswordErrors ErrorCode)
  {
    if (ErrorCode == RegisterStorage.PasswordErrors.Empty)
    {
      return Translations.PasswordEmpty;
    }
    else if (ErrorCode == RegisterStorage.PasswordErrors.Mismatch)
    {
      return Translations.PasswordMismatchError;
    }
    else if (ErrorCode == RegisterStorage.PasswordErrors.Weak)
    {
      return Translations.PasswordWeak;
    }
    else if (ErrorCode == RegisterStorage.PasswordErrors.None)
    {
      return "";
    }

    return "";
  }

  I18nText.Translations Translations = new I18nText.Translations();
  protected override async Task OnInitializedAsync()
  {
    Translations = await I18nText.GetTextTableAsync<I18nText.Translations>(this);
    await I18nText.SetCurrentLanguageAsync(UserStorage.LangCodes.en.ToName());

    RegisterStorage.ResetData();
  }
}