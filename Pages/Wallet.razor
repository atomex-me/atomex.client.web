@page "/wallet"
@using Atomex.Blockchain.Abstract
@using Atomex.Blockchain.Tezos;
@using System.Globalization;
@inject AccountStorage AccountStorage

<div>
  <div class="wallet-page dark-background">
      <div class="wallet-page__left-nav dark-background">
          <div>
            <WalletMenuButton
                Variant="@WalletMenuButton.ButtonVariants.Portfolio"
                OnClick="@WalletMenuButtonClick"
                IsActive="@(ActiveSection == WalletMenuButton.ButtonVariants.Portfolio)" />

            <WalletMenuButton
                Variant="@WalletMenuButton.ButtonVariants.Wallets"
                OnClick="@WalletMenuButtonClick"
                IsActive="@(ActiveSection == WalletMenuButton.ButtonVariants.Wallets)" />

            <WalletMenuButton
                Variant="@WalletMenuButton.ButtonVariants.Conversion"
                OnClick="@WalletMenuButtonClick"
                IsActive="@(ActiveSection == WalletMenuButton.ButtonVariants.Conversion)" />

          </div>
      </div>
      <div class="wallet-page__container">
          @if (ActiveSection == WalletMenuButton.ButtonVariants.Portfolio) {
            <DonutChart
                LTCPercent="@CurrenciesData[AvailableCurrencies.Litecoin].Percent"
                ETHPercent="@CurrenciesData[AvailableCurrencies.Ethereum].Percent"
                XTZPercent="@CurrenciesData[AvailableCurrencies.Tezos].Percent"
                BTCPercent="@CurrenciesData[AvailableCurrencies.Bitcoin].Percent" />
            <WalletDataTable
                Variant="@WalletDataTable.AvailableVariants.Currencies"
                CurrenciesData="@CurrenciesData" />
          }

          @if (ActiveSection == WalletMenuButton.ButtonVariants.Wallets) {
            <div>
                <CurrenciesRow />
                <CurrencyCard
                    OnSendClick="@SendOpenCloseHandler"
                    OnReceiveClick="@ReceiveOpenCloseHandler" />
                <Modal IsOpen="@SendModalOpened" OnClose="@SendOpenCloseHandler">
                    <SendModal OnCancelClick="@SendOpenCloseHandler" />
                </Modal>
                <Modal IsOpen="@ReceiveModalOpened" OnClose="@ReceiveOpenCloseHandler">
                    <ReceiveModal OnCancelClick="@ReceiveOpenCloseHandler" />
                </Modal>
            </div>
            <WalletDataTable
                Variant="@WalletDataTable.AvailableVariants.Transactions"
                TransactionsData="@Transactions" />
          }
          @if (ActiveSection == WalletMenuButton.ButtonVariants.Conversion) {
            <div class="exchange">
                <CurrencyDropdown SelectedCurrency="AvailableCurrencies.Bitcoin" Label="From" />
                <CurrencyDropdown SelectedCurrency="AvailableCurrencies.Litecoin" Label="To" />
                <AmountBadge
                    Label="Amount"
                    SelectedCurrency="AvailableCurrenciesAbbr.ETH" 
                    Amount="@ConvertedCurrencyAmount"
                    OnChange="@OnAmountChange"
                    DollarAmount="@(123.3454m)" />
                
                <div class="light-background">
                    <div class="currencies-exchange-row">
                        <div class="currencies-exchange__currency-usd">
                            <span>0.00000000 <span class="currency-abbr">BTC</span></span>
                            <span class="exchange-amount-container__usd-amount">$0.00 <span class="currency-abbr small">USD</span></span>
                        </div>
                        <i class="icon currency-icon-big bitcoin"></i>
                        <i class="convert-arrow-icon"></i>
                        <i class="icon currency-icon-big litecoin"></i>
                        <div class="currencies-exchange__currency-usd">
                            <span>0.00000000 <span class="currency-abbr">BTC</span></span>
                            <span class="exchange-amount-container__usd-amount">$0.00 <span class="currency-abbr small">USD</span></span>
                        </div>
                    </div>
                    <div class="exchange-info">
                        <RoundedContainer>
                            <div class="gray-text">Estimated price: <span class="white-text">0.0000000</span></div>
                            <div class="gray-text">Estimated payment fee: <span class="white-text">0.0000000</span>
                                <span class="currency-abbr small white-text">BTC</span>
                                <span class="currency-abbr small">$0.01</span>
                            </div>
                            <div class="gray-text">Estimated redeem fee: <span class="white-text">0.0000000</span>
                                <span class="currency-abbr small white-text">BTC</span>
                                <span class="currency-abbr small">$0.01</span>
                            </div>
                        </RoundedContainer>
                    </div>
                </div>

                <div class="exchange-button__container">
                    <NavigateButton Variant="center">Convert</NavigateButton>
                </div>
            </div>
            <WalletDataTable
                Variant="@WalletDataTable.AvailableVariants.Transactions"
                TransactionsData="@Transactions" />
          }
      </div>
  </div>
  <Footer />
</div>

@code {
    protected decimal ConvertedCurrencyAmount = 0.000000m;

    protected void OnAmountChange(string Amount) {
        string amount = Amount.Replace(".", ",");
        decimal number;
        decimal.TryParse(amount, out number);

        ConvertedCurrencyAmount = number;
    }

    protected WalletMenuButton.ButtonVariants ActiveSection { get; set; }
    protected Dictionary<AvailableCurrencies, CurrencyData> CurrenciesData { get; set; }

    protected List<Transaction> Transactions { get; set; }

    protected void WalletMenuButtonClick(WalletMenuButton.ButtonVariants Variant) {
        ActiveSection = Variant;
    }

    public async void OnSendClick() {
        Console.WriteLine("SEND CLICKED");
        // SendModalOpened = !SendModalOpened;
        ReceiveModalOpened = !ReceiveModalOpened;

        WalletAddress WA =  await AccountStorage.Account.GetFreeExternalAddressAsync("XTZ");
        Console.WriteLine(WA.Address);

        var addresses = await AccountStorage.Account
                .GetUnspentAddressesAsync("XTZ")
                .ConfigureAwait(false);

        Console.WriteLine("Scanning start");

        await new HdWalletScanner(AccountStorage.Account)
                .ScanAddressAsync("XTZ", "tz1Ufcd1ZSjs7b9BpdwfKExpY9MeQqnKJRe5")
                .ConfigureAwait(false);

        Console.WriteLine("Scanning end");

        var walletAddress = await AccountStorage.Account
                .ResolveAddressAsync("XTZ", "tz1Ufcd1ZSjs7b9BpdwfKExpY9MeQqnKJRe5")
                .ConfigureAwait(false);

        Console.WriteLine($"Balance is {walletAddress.Balance}");

        var transactions = (await AccountStorage.Account
                .GetTransactionsAsync("XTZ"))
                .ToList();
        
        foreach(TezosTransaction transaction in transactions) {
            Console.WriteLine($"ID: {transaction.Id}, IsConfirmed: {transaction.IsConfirmed} State: {transaction.State} Time: {String.Format("{0:d MMM yyyy, HH:MM}", transaction.CreationTime)} BlockInfo: {transaction.BlockInfo}");
            Console.WriteLine($"AMOUNT: {GetAmount(transaction)}");
        }
    }

    private void SendOpenCloseHandler() {
        SendModalOpened = !SendModalOpened;
    }

    private void ReceiveOpenCloseHandler() {
        ReceiveModalOpened = !ReceiveModalOpened;
    }

    private static decimal GetAmount(TezosTransaction tx) {
        var result = 0m;

        if (tx.Type.HasFlag(BlockchainTransactionType.Input))
            result += Tezos.MtzToTz(tx.Amount);

        if (tx.Type.HasFlag(BlockchainTransactionType.Output))
            result += -Tezos.MtzToTz(tx.Amount + tx.Fee);

        tx.InternalTxs?.ForEach(t => result += GetAmount(t));

        return result;
    }

    protected bool SendModalOpened { get; set; } = false;
    protected bool ReceiveModalOpened { get; set; } = false;

    protected override void OnInitialized() {
        ActiveSection = WalletMenuButton.ButtonVariants.Portfolio;
        CurrenciesData = new Dictionary<AvailableCurrencies, CurrencyData>();

        CurrenciesData.Add(AvailableCurrencies.Bitcoin, new CurrencyData(AvailableCurrencies.Bitcoin, 0.56, 1234, 15));
        CurrenciesData.Add(AvailableCurrencies.Ethereum, new CurrencyData(AvailableCurrencies.Ethereum, 200, 32000, 35));
        CurrenciesData.Add(AvailableCurrencies.Litecoin, new CurrencyData(AvailableCurrencies.Litecoin, 234, 100, 30));
        CurrenciesData.Add(AvailableCurrencies.Tezos, new CurrencyData(AvailableCurrencies.Tezos, 600, 640, 20));
        
        Transactions = new List<Transaction>();
        Transactions.Add(new Transaction("1",BlockchainTransactionState.Confirmed, BlockchainTransactionType.Input, new DateTime(2008, 6, 7, 7, 47, 0), true, 12));
        Transactions.Add(new Transaction("2",BlockchainTransactionState.Unknown, BlockchainTransactionType.Input, new DateTime(2012, 6, 1, 13, 47, 0), true, 34));
        Transactions.Add(new Transaction("3",BlockchainTransactionState.Failed, BlockchainTransactionType.Unknown, new DateTime(2012, 7, 1, 22, 47, 0), true, -0.34534));
        Transactions.Add(new Transaction("4",BlockchainTransactionState.Pending, BlockchainTransactionType.Output, new DateTime(2008, 8, 1, 15, 47, 0), true, -1234.2344));
        Transactions.Add(new Transaction("5",BlockchainTransactionState.Unconfirmed, BlockchainTransactionType.Input, new DateTime(2008, 9, 5, 7, 47, 0), true, 234.23444));
        Transactions.Add(new Transaction("6",BlockchainTransactionState.Pending, BlockchainTransactionType.SwapRedeem, new DateTime(2008, 12, 2, 7, 47, 0), true, 2555));
    }
}
