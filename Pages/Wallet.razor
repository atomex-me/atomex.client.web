@page "/wallet"
@using Atomex.Blockchain.Abstract
@using Atomex.Blockchain.Tezos;
@inject AccountStorage AccountStorage

<div>
  <div class="wallet-page dark-background">
      <div class="wallet-page__left-nav dark-background">
          <div>
            <WalletMenuButton
                Variant="@WalletMenuButton.ButtonVariants.Portfolio"
                OnClick="@WalletMenuButtonClick"
                IsActive="@(ActiveSection == WalletMenuButton.ButtonVariants.Portfolio)" />

            <WalletMenuButton
                Variant="@WalletMenuButton.ButtonVariants.Wallets"
                OnClick="@WalletMenuButtonClick"
                IsActive="@(ActiveSection == WalletMenuButton.ButtonVariants.Wallets)" />

            <WalletMenuButton
                Variant="@WalletMenuButton.ButtonVariants.Conversion"
                OnClick="@WalletMenuButtonClick"
                IsActive="@(ActiveSection == WalletMenuButton.ButtonVariants.Conversion)" />

          </div>
      </div>
      <div class="wallet-page__container">
          @if (ActiveSection == WalletMenuButton.ButtonVariants.Portfolio) {
            <DonutChart
                LTCPercent="@CurrenciesData[AvailableCurrencies.Litecoin].Percent"
                ETHPercent="@CurrenciesData[AvailableCurrencies.Ethereum].Percent"
                XTZPercent="@CurrenciesData[AvailableCurrencies.Tezos].Percent"
                BTCPercent="@CurrenciesData[AvailableCurrencies.Bitcoin].Percent" />
            <WalletDataTable
                Variant="@WalletDataTable.AvailableVariants.Currencies"
                CurrenciesData="@CurrenciesData" />
          }

          @if (ActiveSection == WalletMenuButton.ButtonVariants.Wallets) {
            <div>
                <CurrenciesRow />
                <CurrencyCard OnSendClick="OnSendClick" />
                <Modal IsOpen="@SendModalOpened">
                    Send content
                </Modal>
            </div>
            <WalletDataTable
                Variant="@WalletDataTable.AvailableVariants.Transactions"
                TransactionsData="@Transactions" />
          }
      </div>
  </div>
  <Footer />
</div>

@code {
    protected WalletMenuButton.ButtonVariants ActiveSection { get; set; }
    protected Dictionary<AvailableCurrencies, CurrencyData> CurrenciesData { get; set; }

    protected List<Transaction> Transactions { get; set; }

    protected void WalletMenuButtonClick(WalletMenuButton.ButtonVariants Variant) {
        ActiveSection = Variant;
    }

    public async void OnSendClick() {
        Console.WriteLine("SEND CLICKED");
        SendModalOpened = !SendModalOpened;

        WalletAddress WA =  await AccountStorage.Account.GetFreeExternalAddressAsync("XTZ");
        Console.WriteLine(WA.Address);

        @* var addresses = await AccountStorage.Account
                .GetUnspentAddressesAsync("XTZ")
                .ConfigureAwait(false); *@

        Console.WriteLine("Scanning start");

        await new HdWalletScanner(AccountStorage.Account)
                .ScanAddressAsync("XTZ", "tz1Ufcd1ZSjs7b9BpdwfKExpY9MeQqnKJRe5")
                .ConfigureAwait(false);

        Console.WriteLine("Scanning end");

        var walletAddress = await AccountStorage.Account
                .ResolveAddressAsync("XTZ", "tz1Ufcd1ZSjs7b9BpdwfKExpY9MeQqnKJRe5")
                .ConfigureAwait(false);

        Console.WriteLine($"Balance is {walletAddress.Balance}");

        var transactions = (await AccountStorage.Account
                .GetTransactionsAsync("XTZ"))
                .ToList();
        
        foreach(TezosTransaction transaction in transactions) {
            Console.WriteLine($"ID: {transaction.Id}, IsConfirmed: {transaction.IsConfirmed} State: {transaction.State} Time: {String.Format("{0:d MMM yyyy, HH:MM}", transaction.CreationTime)} BlockInfo: {transaction.BlockInfo}");
            Console.WriteLine($"AMOUNT: {GetAmount(transaction)}");
        }
    }

    private static decimal GetAmount(TezosTransaction tx) {
        var result = 0m;

        if (tx.Type.HasFlag(BlockchainTransactionType.Input))
            result += Tezos.MtzToTz(tx.Amount);

        if (tx.Type.HasFlag(BlockchainTransactionType.Output))
            result += -Tezos.MtzToTz(tx.Amount + tx.Fee);

        tx.InternalTxs?.ForEach(t => result += GetAmount(t));

        return result;
    }

    protected bool SendModalOpened { get; set; } = false;

    protected override void OnInitialized() {
        ActiveSection = WalletMenuButton.ButtonVariants.Portfolio;
        CurrenciesData = new Dictionary<AvailableCurrencies, CurrencyData>();

        CurrenciesData.Add(AvailableCurrencies.Bitcoin, new CurrencyData(AvailableCurrencies.Bitcoin, 0.56, 1234, 15));
        CurrenciesData.Add(AvailableCurrencies.Ethereum, new CurrencyData(AvailableCurrencies.Ethereum, 200, 32000, 35));
        CurrenciesData.Add(AvailableCurrencies.Litecoin, new CurrencyData(AvailableCurrencies.Litecoin, 234, 100, 30));
        CurrenciesData.Add(AvailableCurrencies.Tezos, new CurrencyData(AvailableCurrencies.Tezos, 600, 640, 20));
        
        Transactions = new List<Transaction>();
        Transactions.Add(new Transaction("1",BlockchainTransactionState.Confirmed, BlockchainTransactionType.Input, new DateTime(2008, 6, 7, 7, 47, 0), true, 12));
        Transactions.Add(new Transaction("2",BlockchainTransactionState.Unknown, BlockchainTransactionType.Input, new DateTime(2012, 6, 1, 13, 47, 0), true, 34));
        Transactions.Add(new Transaction("3",BlockchainTransactionState.Failed, BlockchainTransactionType.Unknown, new DateTime(2012, 7, 1, 22, 47, 0), true, -0.34534));
        Transactions.Add(new Transaction("4",BlockchainTransactionState.Pending, BlockchainTransactionType.Output, new DateTime(2008, 8, 1, 15, 47, 0), true, -1234.2344));
        Transactions.Add(new Transaction("5",BlockchainTransactionState.Unconfirmed, BlockchainTransactionType.Input, new DateTime(2008, 9, 5, 7, 47, 0), true, 234.23444));
        Transactions.Add(new Transaction("6",BlockchainTransactionState.Pending, BlockchainTransactionType.SwapRedeem, new DateTime(2008, 12, 2, 7, 47, 0), true, 2555));

    }
}
