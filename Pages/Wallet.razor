@page "/wallet"
@using Atomex.Blockchain.Abstract
@using Atomex.Blockchain.Tezos;
@using Atomex.Wallet;
@inject AccountStorage AccountStorage;
@inject WalletStorage WalletStorage;
@inject SwapStorage SwapStorage;
@using System;
@using System.Timers;
@inject IJSRuntime JSRuntime;

<div>
  <div class="wallet-page dark-background">
      <div class="wallet-page__left-nav dark-background">
          <div>
            <WalletMenuButton
                Variant="@WalletSection.Portfolio"
                OnClick="@WalletMenuButtonClick"
                IsActive="@(WalletStorage.CurrentWalletSection == WalletSection.Portfolio)" />

            <WalletMenuButton
                Variant="@WalletSection.Wallets"
                OnClick="@WalletMenuButtonClick"
                IsActive="@(WalletStorage.CurrentWalletSection == WalletSection.Wallets)" />

            <WalletMenuButton
                Variant="@WalletSection.Conversion"
                OnClick="@WalletMenuButtonClick"
                IsActive="@(WalletStorage.CurrentWalletSection == WalletSection.Conversion)" />

          </div>
      </div>
      <div class="wallet-page__container">
          @if (WalletStorage.CurrentWalletSection == WalletSection.Portfolio) {
            <DonutChart
                LTCPercent="@(WalletStorage.GetCurrencyData(AccountStorage.Litecoin, "percent"))"
                ETHPercent="@(WalletStorage.GetCurrencyData(AccountStorage.Ethereum, "percent"))"
                XTZPercent="@(WalletStorage.GetCurrencyData(AccountStorage.Tezos, "percent"))"
                BTCPercent="@(WalletStorage.GetCurrencyData(AccountStorage.Bitcoin, "percent"))"
                TotalDollars="@(WalletStorage.GetTotalDollars)" />

            <WalletDataTable
                Variant="@WalletDataTable.AvailableVariants.Currencies"
                CurrenciesData="@WalletStorage.PortfolioData" />
          }

          @if (WalletStorage.CurrentWalletSection == WalletSection.Wallets) {
            <div>
                <CurrenciesRow />
                <CurrencyCard
                    OnSendClick="@SendOpenCloseHandler"
                    OnReceiveClick="@ReceiveOpenCloseHandler"
                    OnUpdateClick="@OnUpdateHandler"
                    OnConvertClick="@OnConvertHandler" 
                    CurrencyAmount="@(WalletStorage.SelectedCurrencyData.Balance)"
                    IsLoading="@WalletStorage.IsUpdating"/>
                    
                <Modal IsOpen="@SendModalOpened" OnClose="@SendOpenCloseHandler">
                    <SendModal OnCancelClick="@SendOpenCloseHandler" />
                </Modal>
                <Modal IsOpen="@ReceiveModalOpened" OnClose="@ReceiveOpenCloseHandler">
                    <ReceiveModal OnCancelClick="@ReceiveOpenCloseHandler" />
                </Modal>
            </div>
            <WalletDataTable
                Variant="@WalletDataTable.AvailableVariants.Transactions"
                TransactionsData="@WalletStorage.SelectedCurrencyTransactions" />
          }
          @if (WalletStorage.CurrentWalletSection == WalletSection.Conversion) {
            <div class="exchange">
                <CurrencyDropdown
                  SelectedCurrency="WalletStorage.SelectedCurrency"
                  Label="@Translations.From"
                  IsOpened="@(OpenedDropdown == 1)"
                  HandleOpen="@OnOpenClick" />

                <CurrencyDropdown
                  SelectedCurrency="WalletStorage.SelectedSecondCurrency"
                  Label="@Translations.To"
                  IsSecondCurrency="@true"
                  IsOpened="@(OpenedDropdown == 2)"
                  HandleOpen="@OnOpenClick" />

                <AmountBadge
                    Label="@Translations.Amount"
                    OnChange="@OnAmountChange"
                    SelectedCurrency="@WalletStorage.SelectedCurrency" 
                    Amount="@SwapStorage.Amount"
                    DollarAmount="@SwapStorage.AmountDollars"
                    TotalAmount="@SwapStorage.EstimatedMaxAmount" />
                
                <ConvertCard />

                @* <Chart /> *@

                <Modal IsOpen="@ConvertModalOpened" OnClose="@ConvertOpenCloseHandler">
                    <ConvertModal OnCancelClick="@ConvertOpenCloseHandler" />
                </Modal>

                <div class="exchange-button__container">
                    <NavigateButton Variant="center" OnClick="@ConvertOpenCloseHandler">@Translations.Convert</NavigateButton>
                </div>
            </div>
            <WalletDataTable
                Variant="@WalletDataTable.AvailableVariants.Swaps"
                TransactionsData="@WalletStorage.SelectedCurrencyTransactions" />
          }
      </div>
  </div>
  <Footer />
</div>

@code {
  private int OpenedDropdown = 0;

  private void OnOpenClick(int dropdown)
  {
    if (OpenedDropdown > 0)
    {
      OpenedDropdown = 0;
    }
    else
    {
      OpenedDropdown = dropdown;
    }
  }

  private System.Timers.Timer debounceInputAmount;
  private decimal Amount = 0m;

  protected void OnAmountChange(decimal amount)
  {
    debounceInputAmount.Stop();
    debounceInputAmount.Start();
    Amount = amount;
  }

  private void OnUserFinishAmount(Object source, ElapsedEventArgs e)
  {
    InvokeAsync(() =>
     {
       SwapStorage.Amount = Amount;
     });
  }

  protected List<Transaction> Transactions { get; set; } = new List<Transaction>();

  protected async void WalletMenuButtonClick(WalletSection Variant)
  {
    WalletStorage.CurrentWalletSection = Variant;
  }

  private async void OnUpdateHandler()
  {
    Console.WriteLine($"{WalletStorage.SelectedCurrency.Name} starting to scan");
    await WalletStorage.ScanCurrencyAsync(WalletStorage.SelectedCurrency);
    Console.WriteLine($"{WalletStorage.SelectedCurrency.Name} scanned");
  }

  private async void OnConvertHandler()
  {
  }

  private void ConvertOpenCloseHandler()
  {
    ConvertModalOpened = !ConvertModalOpened;
  }

  private void SendOpenCloseHandler()
  {
    WalletStorage.ResetSendData();
    SendModalOpened = !SendModalOpened;
  }

  private void ReceiveOpenCloseHandler()
  {
    ReceiveModalOpened = !ReceiveModalOpened;
  }

  private bool SendModalOpened { get; set; } = false;
  private bool ReceiveModalOpened { get; set; } = false;
  private bool ConvertModalOpened { get; set; } = false;

  I18nText.Translations Translations = new I18nText.Translations();
  protected override async Task OnInitializedAsync()
  {
    await AccountStorage.ConnectToWallet("[test] test wallet", "StoneGiant25".ToSecureString()); //todo: remove in prod

    Translations = await I18nText.GetTextTableAsync<I18nText.Translations>(this);

    WalletStorage.RefreshRequested += StateHasChanged;
    SwapStorage.RefreshRequested += StateHasChanged;

    debounceInputAmount = new System.Timers.Timer(1000);
    debounceInputAmount.Elapsed += OnUserFinishAmount;
    debounceInputAmount.AutoReset = false;

    await JSRuntime.InvokeVoidAsync("getUIdataSyncElement");
  }
}
