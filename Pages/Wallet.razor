@page "/wallet"
@using Atomex.Blockchain.Abstract
@using Atomex.Blockchain.Tezos;
@inject AccountStorage AccountStorage;
@inject WalletStorage WalletStorage;
@using System;
@using System.Globalization;

<div>
  <div class="wallet-page dark-background">
      <div class="wallet-page__left-nav dark-background">
          <div>
            <WalletMenuButton
                Variant="@WalletMenuButton.ButtonVariants.Portfolio"
                OnClick="@WalletMenuButtonClick"
                IsActive="@(ActiveSection == WalletMenuButton.ButtonVariants.Portfolio)" />

            <WalletMenuButton
                Variant="@WalletMenuButton.ButtonVariants.Wallets"
                OnClick="@WalletMenuButtonClick"
                IsActive="@(ActiveSection == WalletMenuButton.ButtonVariants.Wallets)" />

            <WalletMenuButton
                Variant="@WalletMenuButton.ButtonVariants.Conversion"
                OnClick="@WalletMenuButtonClick"
                IsActive="@(ActiveSection == WalletMenuButton.ButtonVariants.Conversion)" />

          </div>
      </div>
      <div class="wallet-page__container">
          @if (ActiveSection == WalletMenuButton.ButtonVariants.Portfolio) {
            <DonutChart
                LTCPercent="@(WalletStorage.GetCurrencyData(AccountStorage.Litecoin, "percent"))"
                ETHPercent="@(WalletStorage.GetCurrencyData(AccountStorage.Ethereum, "percent"))"
                XTZPercent="@(WalletStorage.GetCurrencyData(AccountStorage.Tezos, "percent"))"
                BTCPercent="@(WalletStorage.GetCurrencyData(AccountStorage.Bitcoin, "percent"))"
                TotalDollars="@(WalletStorage.GetTotalDollars)" />

            <WalletDataTable
                Variant="@WalletDataTable.AvailableVariants.Currencies"
                CurrenciesData="@WalletStorage.PortfolioData" />
          }

          @if (ActiveSection == WalletMenuButton.ButtonVariants.Wallets) {
            <div>
                <CurrenciesRow />
                <CurrencyCard
                    OnSendClick="@SendOpenCloseHandler"
                    OnReceiveClick="@ReceiveOpenCloseHandler"
                    OnUpdateClick="@OnUpdateHandler"
                    OnConvertClick="@OnConvertHandler" 
                    CurrencyAmount="@(WalletStorage.SelectedCurrencyData.Balance)"
                    IsLoading="@WalletStorage.IsUpdating"/>
                    
                <Modal IsOpen="@SendModalOpened" OnClose="@SendOpenCloseHandler">
                    <SendModal OnCancelClick="@SendOpenCloseHandler" />
                </Modal>
                <Modal IsOpen="@ReceiveModalOpened" OnClose="@ReceiveOpenCloseHandler">
                    <ReceiveModal OnCancelClick="@ReceiveOpenCloseHandler" />
                </Modal>
            </div>
            <WalletDataTable
                Variant="@WalletDataTable.AvailableVariants.Transactions"
                TransactionsData="@WalletStorage.SelectedCurrencyTransactions" />
          }
          @if (ActiveSection == WalletMenuButton.ButtonVariants.Conversion) {
            <div class="exchange">
                <CurrencyDropdown
                  SelectedCurrency="WalletStorage.SelectedCurrency"
                  Label="@Translations.From"
                  OnChange="@((Currency currency) => WalletStorage.SelectedCurrency = currency)"/>

                <CurrencyDropdown
                  SelectedCurrency="WalletStorage.SelectedSecondCurrency"
                  Label="@Translations.To"
                  IsSecondCurrency="@true"
                  OnChange="@((Currency currency) => WalletStorage.SelectedSecondCurrency = currency)"/>

                <AmountBadge
                    Label="@Translations.Amount"
                    OnChange="@OnAmountChange"
                    SelectedCurrency="@WalletStorage.SelectedCurrency" 
                    Amount="@WalletStorage.SendingAmount"
                    DollarAmount="@WalletStorage.SendingAmountDollars"
                    TotalAmount="@WalletStorage.SelectedCurrencyData.Balance"
                    TotalAmountDollars="@WalletStorage.SendingAmountDollars"/>
                
                <ConvertCard
                  FromCurrency="@WalletStorage.SelectedCurrency"
                  ToCurrency="@WalletStorage.SelectedSecondCurrency"
                  FromAmount="@WalletStorage.SendingAmount"
                  ToAmount="@(0.123m)"
                />

                <div class="exchange-button__container">
                    <NavigateButton Variant="center">@Translations.Convert</NavigateButton>
                </div>
            </div>
            <WalletDataTable
                Variant="@WalletDataTable.AvailableVariants.Transactions"
                TransactionsData="@WalletStorage.SelectedCurrencyTransactions" />
          }
      </div>
  </div>
  <Footer />
</div>

@code {
  protected decimal ConvertedCurrencyAmount = 0.000000m;

  protected void OnAmountChange(decimal Amount)
  {
    WalletStorage.SendingAmount = Amount;
  }

  protected WalletMenuButton.ButtonVariants ActiveSection { get; set; }

  protected List<Transaction> Transactions { get; set; } = new List<Transaction>();

  protected void WalletMenuButtonClick(WalletMenuButton.ButtonVariants Variant)
  {
    ActiveSection = Variant;
  }

  private async void OnUpdateHandler()
  {
    // await WalletStorage.ScanCurrencyAsync(WalletStorage.AvailableCurrencies[2]);
    // Console.WriteLine($"Scanning {WalletStorage.AvailableCurrencies[2].Name} done");

    // List<IBlockchainTransaction> trans = await WalletStorage.GetTezosBalance();
    // foreach(var tx in trans){
    //     Console.WriteLine(tx.CreationTime);
    //      Console.WriteLine(tx.State);
    // }

    // var balance = await AccountStorage.Account.GetBalanceAsync("LTC");
    // Console.WriteLine($"LTC BALANCE: {balance.Available}");

    // WalletAddress wa = await WalletStorage.GetFreeAddress("LTC");
    Console.WriteLine($"{WalletStorage.SelectedCurrency.Name} starting to scan");
    await WalletStorage.ScanCurrencyAsync(WalletStorage.SelectedCurrency);
    Console.WriteLine($"{WalletStorage.SelectedCurrency.Name} scanned");
  }

  private async void OnConvertHandler()
  {

    Console.Write($"FREE ADDRESS TO {WalletStorage.SelectedCurrency.Name} ");
    Console.WriteLine(await WalletStorage.GetFreeAddress());
    Console.WriteLine($"FEE PRICE FOR {WalletStorage.SelectedCurrency.Name} IS {WalletStorage.SelectedCurrency.GetDefaultFeePrice()}");
  }

  public async void OnSendClick()
  {
    Console.WriteLine("SEND CLICKED");
    // SendModalOpened = !SendModalOpened;
    ReceiveModalOpened = !ReceiveModalOpened;

    WalletAddress WA = await AccountStorage.Account.GetFreeExternalAddressAsync("XTZ");
    Console.WriteLine(WA.Address);

    var addresses = await AccountStorage.Account
    .GetUnspentAddressesAsync("XTZ")
    .ConfigureAwait(false);

    Console.WriteLine("Scanning start");

    await new HdWalletScanner(AccountStorage.Account)
    .ScanAddressAsync("XTZ", "tz1Ufcd1ZSjs7b9BpdwfKExpY9MeQqnKJRe5")
    .ConfigureAwait(false);

    Console.WriteLine("Scanning end");

    // var walletAddress = await AccountStorage.Account
    // .ResolveAddressAsync("XTZ", "tz1Ufcd1ZSjs7b9BpdwfKExpY9MeQqnKJRe5")
    // .ConfigureAwait(false);

    // Console.WriteLine($"Balance is {walletAddress.Balance}");

    var transactions = (await AccountStorage.Account
    .GetTransactionsAsync("XTZ"))
    .ToList();

    foreach (TezosTransaction transaction in transactions)
    {
      Console.WriteLine($"ID: {transaction.Id}, IsConfirmed: {transaction.IsConfirmed} State: {transaction.State} Time: {String.Format("{0:d MMM yyyy, HH:MM}", transaction.CreationTime)} BlockInfo: {transaction.BlockInfo}");
      Console.WriteLine($"AMOUNT: {GetAmount(transaction)}");
    }
  }

  private void SendOpenCloseHandler()
  {
    // WalletStorage.ResetSendData();
    SendModalOpened = !SendModalOpened;
  }

  private void ReceiveOpenCloseHandler()
  {
    ReceiveModalOpened = !ReceiveModalOpened;
    Console.WriteLine();
  }

  private static decimal GetAmount(TezosTransaction tx)
  {
    var result = 0m;

    if (tx.Type.HasFlag(BlockchainTransactionType.Input))
      result += Tezos.MtzToTz(tx.Amount);

    if (tx.Type.HasFlag(BlockchainTransactionType.Output))
      result += -Tezos.MtzToTz(tx.Amount + tx.Fee);

    tx.InternalTxs?.ForEach(t => result += GetAmount(t));

    return result;
  }

  protected bool SendModalOpened { get; set; } = false;
  protected bool ReceiveModalOpened { get; set; } = false;

  I18nText.Translations Translations = new I18nText.Translations();
  protected override async Task OnInitializedAsync()
  {
    await AccountStorage.ConnectToWallet("[test] test wallet", "StoneGiant25".ToSecureString()); //todo: remove in prod

    Translations = await I18nText.GetTextTableAsync<I18nText.Translations>(this);
    ActiveSection = WalletMenuButton.ButtonVariants.Portfolio;
    WalletStorage.Initialize();
    WalletStorage.RefreshRequested += StateHasChanged;
  }
}
