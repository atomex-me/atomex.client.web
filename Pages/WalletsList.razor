@page "/wallets-list"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AccountStorage AccountStorage
@inject WalletStorage WalletStorage;
@inject IJSRuntime JSRuntime;

<div class="atomex__page light-background">
  @if (AvailableWallets != null)
  {
    if (SelectedWalletIndex == -1)
    {
      <div>
        <p class="text-center">
          Select your wallet:
        </p>
        <div class="wallets-list__container">
          @for (int i = 0; i < AvailableWallets.Length; i++)
          {
            var walletIndex = i;
            <div class="wallet-item" @onclick="@(e => OnWalletClick(walletIndex))">
              <i class="wallet-icon" />
              <span>@AvailableWallets[walletIndex]</span>
              <button
                class="delete-wallet"
                @onclick="@(e => OnDeleteWallet(walletIndex))">
                Delete
              </button>
            </div>
          }
          </div>
          <div class="text-center">
            <NavigateButton Variant="center" To="/">Cancel</NavigateButton>
          </div>
        </div>
    }
    else
    {
      <div class="loading-container">
        @if (AccountStorage.WalletLoading)
        {
          <Loader />
        }
        <div class="wallets-list__unlock-container @(AccountStorage.WalletLoading ? "loading" : "")">
          @if (!AccountStorage.LoadingUpdate)
          {
            <p>Please enter password to unlock "@AvailableWallets[SelectedWalletIndex]"</p>
          }
          else
          {
            <p>Updating application, please wait...</p>
          }
          <Input InputType="password" InputName="storagePassword" Value="@WalletPassword" OnChange="@OnWalletPasswordChange"
            InputPlaceholder="@Translations.EnterPasswordPlaceholder" Error="@(WalletPasswordError.Length > 0)"
            ErrorDescription="@WalletPasswordError" SavedData="@($"{AvailableWallets[SelectedWalletIndex]} (Storage)")"
            DefaultFocus />

          <div class="buttons-container">
            <NavigateButton Variant="left" OnClick="OnCancelClick">
              @Translations.Cancel
            </NavigateButton>
            <NavigateButton Variant="right" OnClick="OnUlockClick" TriggeredByEnter
              Disabled="@(String.IsNullOrEmpty(WalletPassword))">
              @Translations.Unlock
            </NavigateButton>
          </div>
        </div>
      </div>
    }
  }
  else
  {
    <div>No wallets founded</div>
  }
</div>

@code {
  private string[] AvailableWallets { get; set; }
  private int SelectedWalletIndex { get; set; }
  private string WalletPassword { get; set; }
  private string WalletPasswordError
  {
    get => AccountStorage.PasswordIncorrect ? Translations.InvalidPassword : "";
    set { }
  }

  private void OnWalletClick(int index)
  {
    // Console.WriteLine($"{AvailableWallets[index]} {index}");
    SelectedWalletIndex = index;
  }

  private void OnDeleteWallet(int index) {
    Console.WriteLine($"Deleting wallet with name {AvailableWallets[index]}");
  }

  private void OnWalletPasswordChange(string pass)
  {
    WalletPassword = pass;
    if (AccountStorage.PasswordIncorrect)
    {
      AccountStorage.PasswordIncorrect = false;
    }
  }

  private void OnCancelClick()
  {
    SelectedWalletIndex = -1;
    WalletPassword = "";
  }

  private async Task OnUlockClick()
  {
    await AccountStorage.ConnectToWallet(AvailableWallets[SelectedWalletIndex], WalletPassword.ToSecureString());
  }

  I18nText.Translations Translations = new I18nText.Translations();
  protected override async Task OnInitializedAsync()
  {
    AccountStorage.RefreshUI += StateHasChanged;
    Translations = await I18nText.GetTextTableAsync<I18nText.Translations>(this);
    await I18nText.SetCurrentLanguageAsync(UserStorage.LangCodes.en.ToName());

    IList<string> availableWalletsList = await AccountStorage.GetAvailableWallets();
    AvailableWallets = availableWalletsList.ToArray<string>();

    var lastLoggedWalletName = await localStorage.GetItemAsync<string>(AccountStorage.lastLoggedWalletNameDueInactivityKey);
    if (!String.IsNullOrEmpty(lastLoggedWalletName)) {
      SelectedWalletIndex = Array.IndexOf(AvailableWallets, lastLoggedWalletName);
      await localStorage.RemoveItemAsync(AccountStorage.lastLoggedWalletNameDueInactivityKey);
    } else {
      SelectedWalletIndex = -1;
    }
  }
}
